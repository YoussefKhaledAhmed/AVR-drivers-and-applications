
Traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003774  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003774  00003808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800082  00800082  0000382a  2**0
                  ALLOC
  3 .stab         00003144  00000000  00000000  0000382c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001225  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a979  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b728  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c2e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 18 	call	0x302e	; 0x302e <main>
      8a:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_setupPinDirection>:
 * Arguments: DIO_PinConfiguration * configurations, DIO_PinDirectionType direction
 * Return: STATUS
 * Description: setting the direction of the pin that is passed through pointer
 *              to structure.
 **********************************************************************************/
STATUS DIO_setupPinDirection(DIO_PinConfiguration * configurations, DIO_PinDirectionType direction){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	6d 83       	std	Y+5, r22	; 0x05
	uint8 PORT = configurations->port_num;
     b60:	eb 81       	ldd	r30, Y+3	; 0x03
     b62:	fc 81       	ldd	r31, Y+4	; 0x04
     b64:	80 81       	ld	r24, Z
     b66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN = configurations->pin_num;
     b68:	eb 81       	ldd	r30, Y+3	; 0x03
     b6a:	fc 81       	ldd	r31, Y+4	; 0x04
     b6c:	81 81       	ldd	r24, Z+1	; 0x01
     b6e:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT){
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	38 87       	std	Y+8, r19	; 0x08
     b78:	2f 83       	std	Y+7, r18	; 0x07
     b7a:	8f 81       	ldd	r24, Y+7	; 0x07
     b7c:	98 85       	ldd	r25, Y+8	; 0x08
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	91 05       	cpc	r25, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <DIO_setupPinDirection+0x40>
     b84:	47 c0       	rjmp	.+142    	; 0xc14 <DIO_setupPinDirection+0xce>
     b86:	2f 81       	ldd	r18, Y+7	; 0x07
     b88:	38 85       	ldd	r19, Y+8	; 0x08
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <DIO_setupPinDirection+0x54>
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	71 f0       	breq	.+28     	; 0xbb4 <DIO_setupPinDirection+0x6e>
     b98:	cc c0       	rjmp	.+408    	; 0xd32 <DIO_setupPinDirection+0x1ec>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <DIO_setupPinDirection+0x60>
     ba4:	67 c0       	rjmp	.+206    	; 0xc74 <DIO_setupPinDirection+0x12e>
     ba6:	8f 81       	ldd	r24, Y+7	; 0x07
     ba8:	98 85       	ldd	r25, Y+8	; 0x08
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <DIO_setupPinDirection+0x6c>
     bb0:	91 c0       	rjmp	.+290    	; 0xcd4 <DIO_setupPinDirection+0x18e>
     bb2:	bf c0       	rjmp	.+382    	; 0xd32 <DIO_setupPinDirection+0x1ec>
	case PORTA_ID:
		if(PIN_OUTPUT == direction){
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	a1 f4       	brne	.+40     	; 0xbe2 <DIO_setupPinDirection+0x9c>
			SET_BIT(DDRA , PIN);
     bba:	aa e3       	ldi	r26, 0x3A	; 58
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e3       	ldi	r30, 0x3A	; 58
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_setupPinDirection+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_setupPinDirection+0x8e>
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	aa c0       	rjmp	.+340    	; 0xd36 <DIO_setupPinDirection+0x1f0>
		} else if(PIN_INPUT == direction){
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	88 23       	and	r24, r24
     be6:	09 f0       	breq	.+2      	; 0xbea <DIO_setupPinDirection+0xa4>
     be8:	a6 c0       	rjmp	.+332    	; 0xd36 <DIO_setupPinDirection+0x1f0>
			CLEAR_BIT(DDRA , PIN);
     bea:	aa e3       	ldi	r26, 0x3A	; 58
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ea e3       	ldi	r30, 0x3A	; 58
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_setupPinDirection+0xc2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_setupPinDirection+0xbe>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	91 c0       	rjmp	.+290    	; 0xd36 <DIO_setupPinDirection+0x1f0>
		}
		break;
	case PORTB_ID:
		if(PIN_OUTPUT == direction){
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	a1 f4       	brne	.+40     	; 0xc42 <DIO_setupPinDirection+0xfc>
			SET_BIT(DDRB , PIN);
     c1a:	a7 e3       	ldi	r26, 0x37	; 55
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e7 e3       	ldi	r30, 0x37	; 55
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	48 2f       	mov	r20, r24
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 2e       	mov	r0, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_setupPinDirection+0xf2>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_setupPinDirection+0xee>
     c3c:	84 2b       	or	r24, r20
     c3e:	8c 93       	st	X, r24
     c40:	7a c0       	rjmp	.+244    	; 0xd36 <DIO_setupPinDirection+0x1f0>
		} else if(PIN_INPUT == direction){
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	88 23       	and	r24, r24
     c46:	09 f0       	breq	.+2      	; 0xc4a <DIO_setupPinDirection+0x104>
     c48:	76 c0       	rjmp	.+236    	; 0xd36 <DIO_setupPinDirection+0x1f0>
			CLEAR_BIT(DDRB , PIN);
     c4a:	a7 e3       	ldi	r26, 0x37	; 55
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e7 e3       	ldi	r30, 0x37	; 55
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_setupPinDirection+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_setupPinDirection+0x11e>
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8c 93       	st	X, r24
     c72:	61 c0       	rjmp	.+194    	; 0xd36 <DIO_setupPinDirection+0x1f0>
		}
		break;
	case PORTC_ID:
		if(PIN_OUTPUT == direction){
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	a1 f4       	brne	.+40     	; 0xca2 <DIO_setupPinDirection+0x15c>
			SET_BIT(DDRC , PIN);
     c7a:	a4 e3       	ldi	r26, 0x34	; 52
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e4 e3       	ldi	r30, 0x34	; 52
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	48 2f       	mov	r20, r24
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 2e       	mov	r0, r18
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_setupPinDirection+0x152>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	0a 94       	dec	r0
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_setupPinDirection+0x14e>
     c9c:	84 2b       	or	r24, r20
     c9e:	8c 93       	st	X, r24
     ca0:	4a c0       	rjmp	.+148    	; 0xd36 <DIO_setupPinDirection+0x1f0>
		} else if(PIN_INPUT == direction){
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	88 23       	and	r24, r24
     ca6:	09 f0       	breq	.+2      	; 0xcaa <DIO_setupPinDirection+0x164>
     ca8:	46 c0       	rjmp	.+140    	; 0xd36 <DIO_setupPinDirection+0x1f0>
			CLEAR_BIT(DDRC , PIN);
     caa:	a4 e3       	ldi	r26, 0x34	; 52
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e4 e3       	ldi	r30, 0x34	; 52
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 2e       	mov	r0, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <DIO_setupPinDirection+0x182>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <DIO_setupPinDirection+0x17e>
     ccc:	80 95       	com	r24
     cce:	84 23       	and	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	31 c0       	rjmp	.+98     	; 0xd36 <DIO_setupPinDirection+0x1f0>
		}
		break;
	case PORTD_ID:
		if(PIN_OUTPUT == direction){
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	a1 f4       	brne	.+40     	; 0xd02 <DIO_setupPinDirection+0x1bc>
			SET_BIT(DDRD , PIN);
     cda:	a1 e3       	ldi	r26, 0x31	; 49
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e1 e3       	ldi	r30, 0x31	; 49
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_setupPinDirection+0x1b2>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_setupPinDirection+0x1ae>
     cfc:	84 2b       	or	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	1a c0       	rjmp	.+52     	; 0xd36 <DIO_setupPinDirection+0x1f0>
		} else if(PIN_INPUT == direction){
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	88 23       	and	r24, r24
     d06:	b9 f4       	brne	.+46     	; 0xd36 <DIO_setupPinDirection+0x1f0>
			CLEAR_BIT(DDRD , PIN);
     d08:	a1 e3       	ldi	r26, 0x31	; 49
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e1 e3       	ldi	r30, 0x31	; 49
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_setupPinDirection+0x1e0>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_setupPinDirection+0x1dc>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_setupPinDirection+0x1f0>
		}
		break;
	default:
		return E_NOK;
     d32:	1e 82       	std	Y+6, r1	; 0x06
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_setupPinDirection+0x1f4>
		break;
	}
	return E_OK;
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	9e 83       	std	Y+6, r25	; 0x06
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
}
     d3c:	28 96       	adiw	r28, 0x08	; 8
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <DIO_pullUpResistorEnable>:
 * Arguments: DIO_PinConfiguration * configuration
 * Return: STATUS
 * Description: enabling the pull up resistor of the pin that is passed through
 *              pointer to structure.
 **********************************************************************************/
STATUS DIO_pullUpResistorEnable(DIO_PinConfiguration * configuration){
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	27 97       	sbiw	r28, 0x07	; 7
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
	uint8 PORT = configuration->port_num;
     d66:	eb 81       	ldd	r30, Y+3	; 0x03
     d68:	fc 81       	ldd	r31, Y+4	; 0x04
     d6a:	80 81       	ld	r24, Z
     d6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN = configuration->pin_num;
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT){
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	3f 83       	std	Y+7, r19	; 0x07
     d7e:	2e 83       	std	Y+6, r18	; 0x06
     d80:	8e 81       	ldd	r24, Y+6	; 0x06
     d82:	9f 81       	ldd	r25, Y+7	; 0x07
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	91 05       	cpc	r25, r1
     d88:	49 f1       	breq	.+82     	; 0xddc <DIO_pullUpResistorEnable+0x8e>
     d8a:	2e 81       	ldd	r18, Y+6	; 0x06
     d8c:	3f 81       	ldd	r19, Y+7	; 0x07
     d8e:	22 30       	cpi	r18, 0x02	; 2
     d90:	31 05       	cpc	r19, r1
     d92:	2c f4       	brge	.+10     	; 0xd9e <DIO_pullUpResistorEnable+0x50>
     d94:	8e 81       	ldd	r24, Y+6	; 0x06
     d96:	9f 81       	ldd	r25, Y+7	; 0x07
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	61 f0       	breq	.+24     	; 0xdb4 <DIO_pullUpResistorEnable+0x66>
     d9c:	5b c0       	rjmp	.+182    	; 0xe54 <DIO_pullUpResistorEnable+0x106>
     d9e:	2e 81       	ldd	r18, Y+6	; 0x06
     da0:	3f 81       	ldd	r19, Y+7	; 0x07
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	71 f1       	breq	.+92     	; 0xe04 <DIO_pullUpResistorEnable+0xb6>
     da8:	8e 81       	ldd	r24, Y+6	; 0x06
     daa:	9f 81       	ldd	r25, Y+7	; 0x07
     dac:	83 30       	cpi	r24, 0x03	; 3
     dae:	91 05       	cpc	r25, r1
     db0:	e9 f1       	breq	.+122    	; 0xe2c <DIO_pullUpResistorEnable+0xde>
     db2:	50 c0       	rjmp	.+160    	; 0xe54 <DIO_pullUpResistorEnable+0x106>
	case PORTA_ID:
		SET_BIT(PORTA , PIN);
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_pullUpResistorEnable+0x84>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_pullUpResistorEnable+0x80>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	3e c0       	rjmp	.+124    	; 0xe58 <DIO_pullUpResistorEnable+0x10a>
		break;
	case PORTB_ID:
		SET_BIT(PORTB , PIN);
     ddc:	a8 e3       	ldi	r26, 0x38	; 56
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e8 e3       	ldi	r30, 0x38	; 56
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_pullUpResistorEnable+0xac>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_pullUpResistorEnable+0xa8>
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	2a c0       	rjmp	.+84     	; 0xe58 <DIO_pullUpResistorEnable+0x10a>
		break;
	case PORTC_ID:
		SET_BIT(PORTC , PIN);
     e04:	a5 e3       	ldi	r26, 0x35	; 53
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e5 e3       	ldi	r30, 0x35	; 53
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_pullUpResistorEnable+0xd4>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_pullUpResistorEnable+0xd0>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	16 c0       	rjmp	.+44     	; 0xe58 <DIO_pullUpResistorEnable+0x10a>
		break;
	case PORTD_ID:
		SET_BIT(PORTD , PIN);
     e2c:	a2 e3       	ldi	r26, 0x32	; 50
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e2 e3       	ldi	r30, 0x32	; 50
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_pullUpResistorEnable+0xfc>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_pullUpResistorEnable+0xf8>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_pullUpResistorEnable+0x10a>
		break;
	default:
		return E_NOK;
     e54:	1d 82       	std	Y+5, r1	; 0x05
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_pullUpResistorEnable+0x10e>
		break;
	}
	return E_OK;
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	9d 83       	std	Y+5, r25	; 0x05
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e5e:	27 96       	adiw	r28, 0x07	; 7
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <DIO_writePin>:
 * Arguments: DIO_PinConfiguration * configurations , uint8 write_value
 * Return: STATUS
 * Description: writing to the pin that is passed through pointer
 *              to structure.
 **********************************************************************************/
STATUS DIO_writePin(DIO_PinConfiguration * configurations , uint8 write_value){
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	28 97       	sbiw	r28, 0x08	; 8
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	6d 83       	std	Y+5, r22	; 0x05
	uint8 PORT = configurations->port_num;
     e8a:	eb 81       	ldd	r30, Y+3	; 0x03
     e8c:	fc 81       	ldd	r31, Y+4	; 0x04
     e8e:	80 81       	ld	r24, Z
     e90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN = configurations->pin_num;
     e92:	eb 81       	ldd	r30, Y+3	; 0x03
     e94:	fc 81       	ldd	r31, Y+4	; 0x04
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT){
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	38 87       	std	Y+8, r19	; 0x08
     ea2:	2f 83       	std	Y+7, r18	; 0x07
     ea4:	8f 81       	ldd	r24, Y+7	; 0x07
     ea6:	98 85       	ldd	r25, Y+8	; 0x08
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <DIO_writePin+0x40>
     eae:	47 c0       	rjmp	.+142    	; 0xf3e <DIO_writePin+0xce>
     eb0:	2f 81       	ldd	r18, Y+7	; 0x07
     eb2:	38 85       	ldd	r19, Y+8	; 0x08
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	2c f4       	brge	.+10     	; 0xec4 <DIO_writePin+0x54>
     eba:	8f 81       	ldd	r24, Y+7	; 0x07
     ebc:	98 85       	ldd	r25, Y+8	; 0x08
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	71 f0       	breq	.+28     	; 0xede <DIO_writePin+0x6e>
     ec2:	d0 c0       	rjmp	.+416    	; 0x1064 <DIO_writePin+0x1f4>
     ec4:	2f 81       	ldd	r18, Y+7	; 0x07
     ec6:	38 85       	ldd	r19, Y+8	; 0x08
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <DIO_writePin+0x60>
     ece:	67 c0       	rjmp	.+206    	; 0xf9e <DIO_writePin+0x12e>
     ed0:	8f 81       	ldd	r24, Y+7	; 0x07
     ed2:	98 85       	ldd	r25, Y+8	; 0x08
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <DIO_writePin+0x6c>
     eda:	91 c0       	rjmp	.+290    	; 0xffe <DIO_writePin+0x18e>
     edc:	c3 c0       	rjmp	.+390    	; 0x1064 <DIO_writePin+0x1f4>
	case PORTA_ID:
		if(LOGIC_HIGH == write_value){
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <DIO_writePin+0x9c>
			SET_BIT(PORTA , PIN);
     ee4:	ab e3       	ldi	r26, 0x3B	; 59
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	eb e3       	ldi	r30, 0x3B	; 59
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_writePin+0x92>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_writePin+0x8e>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	ae c0       	rjmp	.+348    	; 0x1068 <DIO_writePin+0x1f8>
		} else if(LOGIC_LOW == write_value){
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	88 23       	and	r24, r24
     f10:	09 f0       	breq	.+2      	; 0xf14 <DIO_writePin+0xa4>
     f12:	aa c0       	rjmp	.+340    	; 0x1068 <DIO_writePin+0x1f8>
			CLEAR_BIT(PORTA , PIN);
     f14:	ab e3       	ldi	r26, 0x3B	; 59
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e3       	ldi	r30, 0x3B	; 59
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_writePin+0xc2>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_writePin+0xbe>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	95 c0       	rjmp	.+298    	; 0x1068 <DIO_writePin+0x1f8>
		}
		break;
	case PORTB_ID:
		if(LOGIC_HIGH == write_value){
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	a1 f4       	brne	.+40     	; 0xf6c <DIO_writePin+0xfc>
			SET_BIT(PORTB , PIN);
     f44:	a8 e3       	ldi	r26, 0x38	; 56
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 e3       	ldi	r30, 0x38	; 56
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_writePin+0xf2>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_writePin+0xee>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	7e c0       	rjmp	.+252    	; 0x1068 <DIO_writePin+0x1f8>
		} else if(LOGIC_LOW == write_value){
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	88 23       	and	r24, r24
     f70:	09 f0       	breq	.+2      	; 0xf74 <DIO_writePin+0x104>
     f72:	7a c0       	rjmp	.+244    	; 0x1068 <DIO_writePin+0x1f8>
			CLEAR_BIT(PORTB , PIN);
     f74:	a8 e3       	ldi	r26, 0x38	; 56
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e8 e3       	ldi	r30, 0x38	; 56
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_writePin+0x122>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_writePin+0x11e>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	65 c0       	rjmp	.+202    	; 0x1068 <DIO_writePin+0x1f8>
		}
		break;
	case PORTC_ID:
		if(LOGIC_HIGH == write_value){
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	a1 f4       	brne	.+40     	; 0xfcc <DIO_writePin+0x15c>
			SET_BIT(PORTC , PIN);
     fa4:	a5 e3       	ldi	r26, 0x35	; 53
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_writePin+0x152>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_writePin+0x14e>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	4e c0       	rjmp	.+156    	; 0x1068 <DIO_writePin+0x1f8>
		} else if(LOGIC_LOW == write_value){
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	88 23       	and	r24, r24
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <DIO_writePin+0x164>
     fd2:	4a c0       	rjmp	.+148    	; 0x1068 <DIO_writePin+0x1f8>
			CLEAR_BIT(PORTC , PIN);
     fd4:	a5 e3       	ldi	r26, 0x35	; 53
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e3       	ldi	r30, 0x35	; 53
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_writePin+0x182>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_writePin+0x17e>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	35 c0       	rjmp	.+106    	; 0x1068 <DIO_writePin+0x1f8>
		}
		break;
	case PORTD_ID:
		if(LOGIC_HIGH == write_value){
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	b1 f4       	brne	.+44     	; 0x1030 <DIO_writePin+0x1c0>
			SET_BIT(PORTD , configurations->pin_num);
    1004:	a2 e3       	ldi	r26, 0x32	; 50
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	eb 81       	ldd	r30, Y+3	; 0x03
    1012:	fc 81       	ldd	r31, Y+4	; 0x04
    1014:	81 81       	ldd	r24, Z+1	; 0x01
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_writePin+0x1b6>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_writePin+0x1b2>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	1c c0       	rjmp	.+56     	; 0x1068 <DIO_writePin+0x1f8>
		} else if(LOGIC_LOW == write_value){
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	88 23       	and	r24, r24
    1034:	c9 f4       	brne	.+50     	; 0x1068 <DIO_writePin+0x1f8>
			CLEAR_BIT(PORTD , configurations->pin_num);
    1036:	a2 e3       	ldi	r26, 0x32	; 50
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e2 e3       	ldi	r30, 0x32	; 50
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	eb 81       	ldd	r30, Y+3	; 0x03
    1044:	fc 81       	ldd	r31, Y+4	; 0x04
    1046:	81 81       	ldd	r24, Z+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_writePin+0x1e8>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_writePin+0x1e4>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_writePin+0x1f8>
		}
		break;
	default:
		return E_NOK;
    1064:	1e 82       	std	Y+6, r1	; 0x06
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_writePin+0x1fc>
		break;
	}
	return E_OK;
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	9e 83       	std	Y+6, r25	; 0x06
    106c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    106e:	28 96       	adiw	r28, 0x08	; 8
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <DIO_readPin>:
 * Arguments: DIO_PinConfiguration * configurations , uint8 * read_buffer
 * Return: STATUS
 * Description: reading the pin that is passed through pointer
 *              to structure.
 **********************************************************************************/
STATUS DIO_readPin(DIO_PinConfiguration * configurations, uint8 * read_buffer){
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	29 97       	sbiw	r28, 0x09	; 9
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	8b 83       	std	Y+3, r24	; 0x03
    1098:	7e 83       	std	Y+6, r23	; 0x06
    109a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 PORT = configurations->port_num;
    109c:	eb 81       	ldd	r30, Y+3	; 0x03
    109e:	fc 81       	ldd	r31, Y+4	; 0x04
    10a0:	80 81       	ld	r24, Z
    10a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN = configurations->pin_num;
    10a4:	eb 81       	ldd	r30, Y+3	; 0x03
    10a6:	fc 81       	ldd	r31, Y+4	; 0x04
    10a8:	81 81       	ldd	r24, Z+1	; 0x01
    10aa:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT){
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	39 87       	std	Y+9, r19	; 0x09
    10b4:	28 87       	std	Y+8, r18	; 0x08
    10b6:	48 85       	ldd	r20, Y+8	; 0x08
    10b8:	59 85       	ldd	r21, Y+9	; 0x09
    10ba:	41 30       	cpi	r20, 0x01	; 1
    10bc:	51 05       	cpc	r21, r1
    10be:	59 f1       	breq	.+86     	; 0x1116 <DIO_readPin+0x96>
    10c0:	88 85       	ldd	r24, Y+8	; 0x08
    10c2:	99 85       	ldd	r25, Y+9	; 0x09
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	91 05       	cpc	r25, r1
    10c8:	34 f4       	brge	.+12     	; 0x10d6 <DIO_readPin+0x56>
    10ca:	28 85       	ldd	r18, Y+8	; 0x08
    10cc:	39 85       	ldd	r19, Y+9	; 0x09
    10ce:	21 15       	cp	r18, r1
    10d0:	31 05       	cpc	r19, r1
    10d2:	69 f0       	breq	.+26     	; 0x10ee <DIO_readPin+0x6e>
    10d4:	5c c0       	rjmp	.+184    	; 0x118e <DIO_readPin+0x10e>
    10d6:	48 85       	ldd	r20, Y+8	; 0x08
    10d8:	59 85       	ldd	r21, Y+9	; 0x09
    10da:	42 30       	cpi	r20, 0x02	; 2
    10dc:	51 05       	cpc	r21, r1
    10de:	79 f1       	breq	.+94     	; 0x113e <DIO_readPin+0xbe>
    10e0:	88 85       	ldd	r24, Y+8	; 0x08
    10e2:	99 85       	ldd	r25, Y+9	; 0x09
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	91 05       	cpc	r25, r1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <DIO_readPin+0x6c>
    10ea:	3d c0       	rjmp	.+122    	; 0x1166 <DIO_readPin+0xe6>
    10ec:	50 c0       	rjmp	.+160    	; 0x118e <DIO_readPin+0x10e>
	case PORTA_ID:
		*read_buffer = GET_BIT(PINA , PIN);
    10ee:	e9 e3       	ldi	r30, 0x39	; 57
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_readPin+0x86>
    1102:	55 95       	asr	r21
    1104:	47 95       	ror	r20
    1106:	8a 95       	dec	r24
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_readPin+0x82>
    110a:	ca 01       	movw	r24, r20
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	ed 81       	ldd	r30, Y+5	; 0x05
    1110:	fe 81       	ldd	r31, Y+6	; 0x06
    1112:	80 83       	st	Z, r24
    1114:	3e c0       	rjmp	.+124    	; 0x1192 <DIO_readPin+0x112>
		break;
	case PORTB_ID:
		*read_buffer = GET_BIT(PINB , PIN);
    1116:	e6 e3       	ldi	r30, 0x36	; 54
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_readPin+0xae>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_readPin+0xaa>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	ed 81       	ldd	r30, Y+5	; 0x05
    1138:	fe 81       	ldd	r31, Y+6	; 0x06
    113a:	80 83       	st	Z, r24
    113c:	2a c0       	rjmp	.+84     	; 0x1192 <DIO_readPin+0x112>
		break;
	case PORTC_ID:
		*read_buffer = GET_BIT(PINC , PIN);
    113e:	e3 e3       	ldi	r30, 0x33	; 51
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_readPin+0xd6>
    1152:	55 95       	asr	r21
    1154:	47 95       	ror	r20
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_readPin+0xd2>
    115a:	ca 01       	movw	r24, r20
    115c:	81 70       	andi	r24, 0x01	; 1
    115e:	ed 81       	ldd	r30, Y+5	; 0x05
    1160:	fe 81       	ldd	r31, Y+6	; 0x06
    1162:	80 83       	st	Z, r24
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <DIO_readPin+0x112>
		break;
	case PORTD_ID:
		*read_buffer = GET_BIT(PIND , PIN);
    1166:	e0 e3       	ldi	r30, 0x30	; 48
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_readPin+0xfe>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_readPin+0xfa>
    1182:	ca 01       	movw	r24, r20
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	ed 81       	ldd	r30, Y+5	; 0x05
    1188:	fe 81       	ldd	r31, Y+6	; 0x06
    118a:	80 83       	st	Z, r24
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_readPin+0x112>
		break;
	default:
		return E_NOK;
    118e:	1f 82       	std	Y+7, r1	; 0x07
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_readPin+0x116>
		break;
	}
	return E_OK;
    1192:	51 e0       	ldi	r21, 0x01	; 1
    1194:	5f 83       	std	Y+7, r21	; 0x07
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1198:	29 96       	adiw	r28, 0x09	; 9
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <DIO_togglePin>:
 * Arguments: DIO_PinConfiguration * configurations
 * Return: STATUS
 * Description: toggle the pin that is passed through pointer
 *              to structure.
 **********************************************************************************/
STATUS DIO_togglePin(DIO_PinConfiguration * configurations){
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	27 97       	sbiw	r28, 0x07	; 7
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 PORT = configurations->port_num;
    11c2:	eb 81       	ldd	r30, Y+3	; 0x03
    11c4:	fc 81       	ldd	r31, Y+4	; 0x04
    11c6:	80 81       	ld	r24, Z
    11c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN = configurations->pin_num;
    11ca:	eb 81       	ldd	r30, Y+3	; 0x03
    11cc:	fc 81       	ldd	r31, Y+4	; 0x04
    11ce:	81 81       	ldd	r24, Z+1	; 0x01
    11d0:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT){
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3f 83       	std	Y+7, r19	; 0x07
    11da:	2e 83       	std	Y+6, r18	; 0x06
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	29 f1       	breq	.+74     	; 0x1230 <DIO_togglePin+0x86>
    11e6:	2e 81       	ldd	r18, Y+6	; 0x06
    11e8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	2c f4       	brge	.+10     	; 0x11fa <DIO_togglePin+0x50>
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	9f 81       	ldd	r25, Y+7	; 0x07
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	61 f0       	breq	.+24     	; 0x1210 <DIO_togglePin+0x66>
    11f8:	4b c0       	rjmp	.+150    	; 0x1290 <DIO_togglePin+0xe6>
    11fa:	2e 81       	ldd	r18, Y+6	; 0x06
    11fc:	3f 81       	ldd	r19, Y+7	; 0x07
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	31 f1       	breq	.+76     	; 0x1250 <DIO_togglePin+0xa6>
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	89 f1       	breq	.+98     	; 0x1270 <DIO_togglePin+0xc6>
    120e:	40 c0       	rjmp	.+128    	; 0x1290 <DIO_togglePin+0xe6>
	case PORTA_ID:
		TOGGLE_BIT(PORT , PIN);
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_togglePin+0x78>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_togglePin+0x74>
    1226:	98 2f       	mov	r25, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	89 27       	eor	r24, r25
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	32 c0       	rjmp	.+100    	; 0x1294 <DIO_togglePin+0xea>
		break;
	case PORTB_ID:
		TOGGLE_BIT(PORT , PIN);
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_togglePin+0x98>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_togglePin+0x94>
    1246:	98 2f       	mov	r25, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	89 27       	eor	r24, r25
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	22 c0       	rjmp	.+68     	; 0x1294 <DIO_togglePin+0xea>
		break;
	case PORTC_ID:
		TOGGLE_BIT(PORT , PIN);
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_togglePin+0xb8>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_togglePin+0xb4>
    1266:	98 2f       	mov	r25, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	89 27       	eor	r24, r25
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	12 c0       	rjmp	.+36     	; 0x1294 <DIO_togglePin+0xea>
		break;
	case PORTD_ID:
		TOGGLE_BIT(PORT , PIN);
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_togglePin+0xd8>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_togglePin+0xd4>
    1286:	98 2f       	mov	r25, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	89 27       	eor	r24, r25
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_togglePin+0xea>
		break;
	default:
		return E_NOK;
    1290:	1d 82       	std	Y+5, r1	; 0x05
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_togglePin+0xee>
		break;
	}
	return E_OK;
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	9d 83       	std	Y+5, r25	; 0x05
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
}
    129a:	27 96       	adiw	r28, 0x07	; 7
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_setupPortDirection>:
 * Arguments: DIO_PinConfiguration * configurations
 * Return: STATUS
 * Description: setting the direction of the port that is passed through pointer
 *              to structure.
 **********************************************************************************/
STATUS DIO_setupPortDirection(DIO_PortDirectionConfigurations * configurations){
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	27 97       	sbiw	r28, 0x07	; 7
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
	uint8 PORT = configurations->port_num;
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
    12c8:	80 81       	ld	r24, Z
    12ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 direction = configurations->direction;
    12cc:	eb 81       	ldd	r30, Y+3	; 0x03
    12ce:	fc 81       	ldd	r31, Y+4	; 0x04
    12d0:	81 81       	ldd	r24, Z+1	; 0x01
    12d2:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT){
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3f 83       	std	Y+7, r19	; 0x07
    12dc:	2e 83       	std	Y+6, r18	; 0x06
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	21 f1       	breq	.+72     	; 0x1330 <DIO_setupPortDirection+0x84>
    12e8:	2e 81       	ldd	r18, Y+6	; 0x06
    12ea:	3f 81       	ldd	r19, Y+7	; 0x07
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	2c f4       	brge	.+10     	; 0x12fc <DIO_setupPortDirection+0x50>
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
    12f4:	9f 81       	ldd	r25, Y+7	; 0x07
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	61 f0       	breq	.+24     	; 0x1312 <DIO_setupPortDirection+0x66>
    12fa:	47 c0       	rjmp	.+142    	; 0x138a <DIO_setupPortDirection+0xde>
    12fc:	2e 81       	ldd	r18, Y+6	; 0x06
    12fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	21 f1       	breq	.+72     	; 0x134e <DIO_setupPortDirection+0xa2>
    1306:	8e 81       	ldd	r24, Y+6	; 0x06
    1308:	9f 81       	ldd	r25, Y+7	; 0x07
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	71 f1       	breq	.+92     	; 0x136c <DIO_setupPortDirection+0xc0>
    1310:	3c c0       	rjmp	.+120    	; 0x138a <DIO_setupPortDirection+0xde>
	case PORTA_ID:
		if(PORT_OUTPUT == direction){
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	8f 3f       	cpi	r24, 0xFF	; 255
    1316:	29 f4       	brne	.+10     	; 0x1322 <DIO_setupPortDirection+0x76>
			PORTA = PORT_OUTPUT;
    1318:	eb e3       	ldi	r30, 0x3B	; 59
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	80 83       	st	Z, r24
    1320:	36 c0       	rjmp	.+108    	; 0x138e <DIO_setupPortDirection+0xe2>
		} else if(PORT_INPUT == direction){
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	88 23       	and	r24, r24
    1326:	99 f5       	brne	.+102    	; 0x138e <DIO_setupPortDirection+0xe2>
			PORTA = PORT_INPUT;
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	10 82       	st	Z, r1
    132e:	2f c0       	rjmp	.+94     	; 0x138e <DIO_setupPortDirection+0xe2>
		}
		break;
	case PORTB_ID:
		if(PORT_OUTPUT == direction){
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	8f 3f       	cpi	r24, 0xFF	; 255
    1334:	29 f4       	brne	.+10     	; 0x1340 <DIO_setupPortDirection+0x94>
			PORTB = PORT_OUTPUT;
    1336:	e8 e3       	ldi	r30, 0x38	; 56
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	80 83       	st	Z, r24
    133e:	27 c0       	rjmp	.+78     	; 0x138e <DIO_setupPortDirection+0xe2>
		} else if(PORT_INPUT == direction){
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	88 23       	and	r24, r24
    1344:	21 f5       	brne	.+72     	; 0x138e <DIO_setupPortDirection+0xe2>
			PORTB = PORT_INPUT;
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	10 82       	st	Z, r1
    134c:	20 c0       	rjmp	.+64     	; 0x138e <DIO_setupPortDirection+0xe2>
		}
		break;
	case PORTC_ID:
		if(PORT_OUTPUT == direction){
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	8f 3f       	cpi	r24, 0xFF	; 255
    1352:	29 f4       	brne	.+10     	; 0x135e <DIO_setupPortDirection+0xb2>
			PORTC = PORT_OUTPUT;
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	80 83       	st	Z, r24
    135c:	18 c0       	rjmp	.+48     	; 0x138e <DIO_setupPortDirection+0xe2>
		} else if(PORT_INPUT == direction){
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	88 23       	and	r24, r24
    1362:	a9 f4       	brne	.+42     	; 0x138e <DIO_setupPortDirection+0xe2>
			PORTC = PORT_INPUT;
    1364:	e5 e3       	ldi	r30, 0x35	; 53
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
    136a:	11 c0       	rjmp	.+34     	; 0x138e <DIO_setupPortDirection+0xe2>
		}
		break;
	case PORTD_ID:
		if(PORT_OUTPUT == direction){
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	8f 3f       	cpi	r24, 0xFF	; 255
    1370:	29 f4       	brne	.+10     	; 0x137c <DIO_setupPortDirection+0xd0>
			PORTD = PORT_OUTPUT;
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	80 83       	st	Z, r24
    137a:	09 c0       	rjmp	.+18     	; 0x138e <DIO_setupPortDirection+0xe2>
		} else if(PORT_INPUT == direction){
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	88 23       	and	r24, r24
    1380:	31 f4       	brne	.+12     	; 0x138e <DIO_setupPortDirection+0xe2>
			PORTD = PORT_INPUT;
    1382:	e2 e3       	ldi	r30, 0x32	; 50
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	10 82       	st	Z, r1
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_setupPortDirection+0xe2>
		}
		break;
	default:
		return E_NOK;
    138a:	1d 82       	std	Y+5, r1	; 0x05
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_setupPortDirection+0xe6>
		break;
	}
	return E_OK;
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	9d 83       	std	Y+5, r25	; 0x05
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1394:	27 96       	adiw	r28, 0x07	; 7
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <DIO_writePort>:
 * Arguments: uint8 port_num , uint8 write_value
 * Return: STATUS
 * Description: writing on the port that is passed through pointer
 *              to structure.
 ***********************************************************************/
STATUS DIO_writePort(uint8 port_num , uint8 write_value){
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <DIO_writePort+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <DIO_writePort+0x8>
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num){
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3d 83       	std	Y+5, r19	; 0x05
    13c0:	2c 83       	std	Y+4, r18	; 0x04
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	d1 f0       	breq	.+52     	; 0x1400 <DIO_writePort+0x5a>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <DIO_writePort+0x3a>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <DIO_writePort+0x50>
    13de:	1f c0       	rjmp	.+62     	; 0x141e <DIO_writePort+0x78>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <DIO_writePort+0x64>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	81 f0       	breq	.+32     	; 0x1414 <DIO_writePort+0x6e>
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <DIO_writePort+0x78>
	case PORTA_ID:
		PORTA = write_value;
    13f6:	eb e3       	ldi	r30, 0x3B	; 59
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	11 c0       	rjmp	.+34     	; 0x1422 <DIO_writePort+0x7c>
		break;
	case PORTB_ID:
		PORTB = write_value;
    1400:	e8 e3       	ldi	r30, 0x38	; 56
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
    1408:	0c c0       	rjmp	.+24     	; 0x1422 <DIO_writePort+0x7c>
		break;
	case PORTC_ID:
		PORTC = write_value;
    140a:	e5 e3       	ldi	r30, 0x35	; 53
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	80 83       	st	Z, r24
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <DIO_writePort+0x7c>
		break;
	case PORTD_ID:
		PORTD = write_value;
    1414:	e2 e3       	ldi	r30, 0x32	; 50
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	80 83       	st	Z, r24
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_writePort+0x7c>
		break;
	default:
		return E_NOK;
    141e:	1b 82       	std	Y+3, r1	; 0x03
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_writePort+0x80>
		break;
	}
	return E_OK;
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	9b 83       	std	Y+3, r25	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <DIO_readPort>:
 * Arguments: uint8 port_num , uint8* read_buffer
 * Return: STATUS
 * Description: reading the port that is passed through pointer
 *              to structure.
 ***********************************************************************/
STATUS DIO_readPort(uint8 port_num , uint8* read_buffer){
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_readPort+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_readPort+0x8>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_readPort+0xa>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	7b 83       	std	Y+3, r23	; 0x03
    144a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num){
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3e 83       	std	Y+6, r19	; 0x06
    1454:	2d 83       	std	Y+5, r18	; 0x05
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	e1 f0       	breq	.+56     	; 0x1498 <DIO_readPort+0x60>
    1460:	2d 81       	ldd	r18, Y+5	; 0x05
    1462:	3e 81       	ldd	r19, Y+6	; 0x06
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	2c f4       	brge	.+10     	; 0x1474 <DIO_readPort+0x3c>
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	61 f0       	breq	.+24     	; 0x148a <DIO_readPort+0x52>
    1472:	27 c0       	rjmp	.+78     	; 0x14c2 <DIO_readPort+0x8a>
    1474:	2d 81       	ldd	r18, Y+5	; 0x05
    1476:	3e 81       	ldd	r19, Y+6	; 0x06
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	a1 f0       	breq	.+40     	; 0x14a6 <DIO_readPort+0x6e>
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	b1 f0       	breq	.+44     	; 0x14b4 <DIO_readPort+0x7c>
    1488:	1c c0       	rjmp	.+56     	; 0x14c2 <DIO_readPort+0x8a>
	case PORTA_ID:
		*read_buffer = PINA;
    148a:	e9 e3       	ldi	r30, 0x39	; 57
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	ea 81       	ldd	r30, Y+2	; 0x02
    1492:	fb 81       	ldd	r31, Y+3	; 0x03
    1494:	80 83       	st	Z, r24
    1496:	17 c0       	rjmp	.+46     	; 0x14c6 <DIO_readPort+0x8e>
		break;
	case PORTB_ID:
		*read_buffer = PINB;
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	ea 81       	ldd	r30, Y+2	; 0x02
    14a0:	fb 81       	ldd	r31, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	10 c0       	rjmp	.+32     	; 0x14c6 <DIO_readPort+0x8e>
		break;
	case PORTC_ID:
		*read_buffer = PINC;
    14a6:	e3 e3       	ldi	r30, 0x33	; 51
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	ea 81       	ldd	r30, Y+2	; 0x02
    14ae:	fb 81       	ldd	r31, Y+3	; 0x03
    14b0:	80 83       	st	Z, r24
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <DIO_readPort+0x8e>
		break;
	case PORTD_ID:
		*read_buffer = PIND;
    14b4:	e0 e3       	ldi	r30, 0x30	; 48
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	ea 81       	ldd	r30, Y+2	; 0x02
    14bc:	fb 81       	ldd	r31, Y+3	; 0x03
    14be:	80 83       	st	Z, r24
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_readPort+0x8e>
		break;
	default:
		return E_NOK;
    14c2:	1c 82       	std	Y+4, r1	; 0x04
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_readPort+0x92>
		break;
	}
	return E_OK;
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14cc:	26 96       	adiw	r28, 0x06	; 6
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <EXTI_init>:
 * Function name: EXTI_init
 * Arguments: void
 * Return: void
 * Description: setting the I-bit (i.e., global interrupt bit).
 *****************************************************************/
void EXTI_init(void){
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , GLOBAL_INTERRUPT_BIT_NUM);
    14e6:	af e5       	ldi	r26, 0x5F	; 95
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ef e5       	ldi	r30, 0x5F	; 95
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 68       	ori	r24, 0x80	; 128
    14f2:	8c 93       	st	X, r24
}
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <EXTI_int0_init>:
 *              2. setting the values of ISC00 and ISC01 to
 *                 initialize the desired mode of the interrupt
 *              3. setting the INT0 bit in the GICR to enable
 *                 the external interrupt 0.
 *****************************************************************/
void EXTI_int0_init(void){
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG , GLOBAL_INTERRUPT_BIT_NUM); /* disabling the global interrupt */
    1504:	af e5       	ldi	r26, 0x5F	; 95
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ef e5       	ldi	r30, 0x5F	; 95
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8f 77       	andi	r24, 0x7F	; 127
    1510:	8c 93       	st	X, r24
	/* clearing ISC00 and ISC01 by using (MCUCR & (0xFC)) and applying OR  *
	 * operation with the mode that is defined in the header file.         */
	uint8 MCUCR_replaceValue = (MCUCR & (0xFC)) | (INT0_MODE);
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8c 7f       	andi	r24, 0xFC	; 252
    151a:	89 83       	std	Y+1, r24	; 0x01
	MCUCR = MCUCR_replaceValue;
    151c:	e5 e5       	ldi	r30, 0x55	; 85
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	80 83       	st	Z, r24
	/* setting the INT0 bit in the GICR register */
	SET_BIT(GICR , INT0);
    1524:	ab e5       	ldi	r26, 0x5B	; 91
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	eb e5       	ldi	r30, 0x5B	; 91
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	8c 93       	st	X, r24
}
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <EXTI_int1_init>:
 *              2. setting the values of ISC10 and ISC11 to
 *                 initialize the desired mode of the interrupt
 *              3. setting the INT1 bit in the GICR to enable
 *                 the external interrupt 1.
 *****************************************************************/
void EXTI_int1_init(void){
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG , GLOBAL_INTERRUPT_BIT_NUM);/* disabling the global interrupt    */
    1544:	af e5       	ldi	r26, 0x5F	; 95
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ef e5       	ldi	r30, 0x5F	; 95
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8f 77       	andi	r24, 0x7F	; 127
    1550:	8c 93       	st	X, r24
	/* clearing ISC10 and ISC11 by using (MCUCR & (0xF3)) and applying OR           *
	 * operation with the mode that is defined in the header file but shifted       *
	 * since the ISC10 and ISC11 bits are bits number 2 and 3 in the MCUCR register */
	uint8 MCUCR_replaceValue = (MCUCR & (0xF3)) | (INT1_MODE<<2);
    1552:	e5 e5       	ldi	r30, 0x55	; 85
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	83 7f       	andi	r24, 0xF3	; 243
    155a:	88 60       	ori	r24, 0x08	; 8
    155c:	89 83       	std	Y+1, r24	; 0x01
	MCUCR = MCUCR_replaceValue;
    155e:	e5 e5       	ldi	r30, 0x55	; 85
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	80 83       	st	Z, r24
	/* setting the INT1 bit in the GICR register */
	SET_BIT(GICR , INT1);
    1566:	ab e5       	ldi	r26, 0x5B	; 91
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e5       	ldi	r30, 0x5B	; 91
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	8c 93       	st	X, r24
}
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <EXTI_int2_init>:
 *              2. setting the values of ISC2 to
 *                 initialize the desired mode of the interrupt
 *              3. setting the INT2 bit in the GICR to enable
 *                 the external interrupt 2.
 *****************************************************************/
void EXTI_int2_init(void){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG , GLOBAL_INTERRUPT_BIT_NUM); /* disabling the global interrupt */
    1584:	af e5       	ldi	r26, 0x5F	; 95
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ef e5       	ldi	r30, 0x5F	; 95
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8f 77       	andi	r24, 0x7F	; 127
    1590:	8c 93       	st	X, r24
	/* clearing ISC2  and applying OR operation with the mode that is   *
	 * defined in the header file.                                      */
	CLEAR_BIT(MCUCSR , ISC2);
    1592:	a4 e5       	ldi	r26, 0x54	; 84
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e4 e5       	ldi	r30, 0x54	; 84
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7b       	andi	r24, 0xBF	; 191
    159e:	8c 93       	st	X, r24
	MCUCSR |= (INT2_MODE<<ISC2);
    15a0:	a4 e5       	ldi	r26, 0x54	; 84
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e4 e5       	ldi	r30, 0x54	; 84
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8c 93       	st	X, r24
	/* setting the INT2 bit in the GICR register */
	SET_BIT(GICR , INT2);
    15ac:	ab e5       	ldi	r26, 0x5B	; 91
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e5       	ldi	r30, 0x5B	; 91
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 62       	ori	r24, 0x20	; 32
    15b8:	8c 93       	st	X, r24
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <BUTTON_init>:
 * Description: initializing the direction of the pin to input
 *              , enabling the internal pull up resistor, and
 *              enabling the global interrupt bit and the external
 *              interrupt 1 bit.
 *****************************************************************/
void BUTTON_init(){
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(&button, PIN_INPUT); /* configuring the pin to be input*/
    15c8:	87 e7       	ldi	r24, 0x77	; 119
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_pullUpResistorEnable(&button); /*enabling the internal pull up */
    15d2:	87 e7       	ldi	r24, 0x77	; 119
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_pullUpResistorEnable>
	EXTI_int1_init(); /* initializing the external interrupt 1 */
    15da:	0e 94 9d 0a 	call	0x153a	; 0x153a <EXTI_int1_init>
	EXTI_init(); /* enabling the global interrupt (I-bit) */
    15de:	0e 94 6f 0a 	call	0x14de	; 0x14de <EXTI_init>
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <LCD_init>:
 * Function name: LCD_init
 * Arguments: void
 * Return: STATUS
 * Description: initializing the LCD driver
 *****************************************************************/
STATUS LCD_init(void){
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	c4 54       	subi	r28, 0x44	; 68
    15f2:	d0 40       	sbci	r29, 0x00	; 0
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
	/* configurations of the RS and enable pins. */
	DIO_PinConfiguration RS = {LCD_CMD_PORT_ID , LCD_RS};
    15fe:	19 ae       	std	Y+57, r1	; 0x39
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	8a af       	std	Y+58, r24	; 0x3a
	DIO_PinConfiguration EN = {LCD_CMD_PORT_ID , LCD_EN};
    1604:	1b ae       	std	Y+59, r1	; 0x3b
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	8c af       	std	Y+60, r24	; 0x3c
	/* configurations of the data pins. */
	DIO_PinConfiguration D4 = {LCD_DATA_PORT_ID , LCD_D4};
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	8d af       	std	Y+61, r24	; 0x3d
    160e:	1e ae       	std	Y+62, r1	; 0x3e
	DIO_PinConfiguration D5 = {LCD_DATA_PORT_ID , LCD_D5};
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	8f af       	std	Y+63, r24	; 0x3f
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	fe 01       	movw	r30, r28
    1618:	e0 5c       	subi	r30, 0xC0	; 192
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 83       	st	Z, r24
	DIO_PinConfiguration D6 = {LCD_DATA_PORT_ID , LCD_D6};
    161e:	fe 01       	movw	r30, r28
    1620:	ef 5b       	subi	r30, 0xBF	; 191
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
    1628:	fe 01       	movw	r30, r28
    162a:	ef 5b       	subi	r30, 0xBF	; 191
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	81 83       	std	Z+1, r24	; 0x01
	DIO_PinConfiguration D7 = {LCD_DATA_PORT_ID , LCD_D7};
    1632:	fe 01       	movw	r30, r28
    1634:	ed 5b       	subi	r30, 0xBD	; 189
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 83       	st	Z, r24
    163c:	fe 01       	movw	r30, r28
    163e:	ed 5b       	subi	r30, 0xBD	; 189
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	84 e0       	ldi	r24, 0x04	; 4
    1644:	81 83       	std	Z+1, r24	; 0x01

	/* setting the RS and EN pins as output pins */
	DIO_setupPinDirection(&RS, PIN_OUTPUT);
    1646:	ce 01       	movw	r24, r28
    1648:	c9 96       	adiw	r24, 0x39	; 57
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_setupPinDirection(&EN, PIN_OUTPUT);
    1650:	ce 01       	movw	r24, r28
    1652:	cb 96       	adiw	r24, 0x3b	; 59
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>

	/* setting all the data pins as output pins */
	DIO_setupPinDirection(&D4, PIN_OUTPUT);
    165a:	ce 01       	movw	r24, r28
    165c:	cd 96       	adiw	r24, 0x3d	; 61
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_setupPinDirection(&D5, PIN_OUTPUT);
    1664:	ce 01       	movw	r24, r28
    1666:	cf 96       	adiw	r24, 0x3f	; 63
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_setupPinDirection(&D6, PIN_OUTPUT);
    166e:	ce 01       	movw	r24, r28
    1670:	8f 5b       	subi	r24, 0xBF	; 191
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_setupPinDirection(&D7, PIN_OUTPUT);
    167a:	ce 01       	movw	r24, r28
    167c:	8d 5b       	subi	r24, 0xBD	; 189
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>

	/* sending the command: LCD_TWO_LINES_FOUR_BITS_MODE which is configured
	 * in the lcd_cfg.h file. */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1686:	88 e2       	ldi	r24, 0x28	; 40
    1688:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_sendCommand>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 e8       	ldi	r26, 0x80	; 128
    1692:	bf e3       	ldi	r27, 0x3F	; 63
    1694:	8d ab       	std	Y+53, r24	; 0x35
    1696:	9e ab       	std	Y+54, r25	; 0x36
    1698:	af ab       	std	Y+55, r26	; 0x37
    169a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169c:	6d a9       	ldd	r22, Y+53	; 0x35
    169e:	7e a9       	ldd	r23, Y+54	; 0x36
    16a0:	8f a9       	ldd	r24, Y+55	; 0x37
    16a2:	98 ad       	ldd	r25, Y+56	; 0x38
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a e7       	ldi	r20, 0x7A	; 122
    16aa:	55 e4       	ldi	r21, 0x45	; 69
    16ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	89 ab       	std	Y+49, r24	; 0x31
    16b6:	9a ab       	std	Y+50, r25	; 0x32
    16b8:	ab ab       	std	Y+51, r26	; 0x33
    16ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16bc:	69 a9       	ldd	r22, Y+49	; 0x31
    16be:	7a a9       	ldd	r23, Y+50	; 0x32
    16c0:	8b a9       	ldd	r24, Y+51	; 0x33
    16c2:	9c a9       	ldd	r25, Y+52	; 0x34
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	2c f4       	brge	.+10     	; 0x16de <LCD_init+0xf6>
		__ticks = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	98 ab       	std	Y+48, r25	; 0x30
    16da:	8f a7       	std	Y+47, r24	; 0x2f
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <LCD_init+0x174>
	else if (__tmp > 65535)
    16de:	69 a9       	ldd	r22, Y+49	; 0x31
    16e0:	7a a9       	ldd	r23, Y+50	; 0x32
    16e2:	8b a9       	ldd	r24, Y+51	; 0x33
    16e4:	9c a9       	ldd	r25, Y+52	; 0x34
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	4c f5       	brge	.+82     	; 0x1748 <LCD_init+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f6:	6d a9       	ldd	r22, Y+53	; 0x35
    16f8:	7e a9       	ldd	r23, Y+54	; 0x36
    16fa:	8f a9       	ldd	r24, Y+55	; 0x37
    16fc:	98 ad       	ldd	r25, Y+56	; 0x38
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	98 ab       	std	Y+48, r25	; 0x30
    171c:	8f a7       	std	Y+47, r24	; 0x2f
    171e:	0f c0       	rjmp	.+30     	; 0x173e <LCD_init+0x156>
    1720:	80 e9       	ldi	r24, 0x90	; 144
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	9e a7       	std	Y+46, r25	; 0x2e
    1726:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1728:	8d a5       	ldd	r24, Y+45	; 0x2d
    172a:	9e a5       	ldd	r25, Y+46	; 0x2e
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <LCD_init+0x144>
    1730:	9e a7       	std	Y+46, r25	; 0x2e
    1732:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	8f a5       	ldd	r24, Y+47	; 0x2f
    1736:	98 a9       	ldd	r25, Y+48	; 0x30
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	98 ab       	std	Y+48, r25	; 0x30
    173c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1740:	98 a9       	ldd	r25, Y+48	; 0x30
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	69 f7       	brne	.-38     	; 0x1720 <LCD_init+0x138>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <LCD_init+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1748:	69 a9       	ldd	r22, Y+49	; 0x31
    174a:	7a a9       	ldd	r23, Y+50	; 0x32
    174c:	8b a9       	ldd	r24, Y+51	; 0x33
    174e:	9c a9       	ldd	r25, Y+52	; 0x34
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	98 ab       	std	Y+48, r25	; 0x30
    175a:	8f a7       	std	Y+47, r24	; 0x2f
    175c:	8f a5       	ldd	r24, Y+47	; 0x2f
    175e:	98 a9       	ldd	r25, Y+48	; 0x30
    1760:	9c a7       	std	Y+44, r25	; 0x2c
    1762:	8b a7       	std	Y+43, r24	; 0x2b
    1764:	8b a5       	ldd	r24, Y+43	; 0x2b
    1766:	9c a5       	ldd	r25, Y+44	; 0x2c
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_init+0x180>
    176c:	9c a7       	std	Y+44, r25	; 0x2c
    176e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/* sending the command: LCD_CURSOR_OFF which is configured
	 * in the lcd_cfg.h file. */
	LCD_sendCommand(LCD_CURSOR_OFF);
    1770:	8c e0       	ldi	r24, 0x0C	; 12
    1772:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_sendCommand>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e8       	ldi	r26, 0x80	; 128
    177c:	bf e3       	ldi	r27, 0x3F	; 63
    177e:	8f a3       	std	Y+39, r24	; 0x27
    1780:	98 a7       	std	Y+40, r25	; 0x28
    1782:	a9 a7       	std	Y+41, r26	; 0x29
    1784:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6f a1       	ldd	r22, Y+39	; 0x27
    1788:	78 a5       	ldd	r23, Y+40	; 0x28
    178a:	89 a5       	ldd	r24, Y+41	; 0x29
    178c:	9a a5       	ldd	r25, Y+42	; 0x2a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a e7       	ldi	r20, 0x7A	; 122
    1794:	55 e4       	ldi	r21, 0x45	; 69
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8b a3       	std	Y+35, r24	; 0x23
    17a0:	9c a3       	std	Y+36, r25	; 0x24
    17a2:	ad a3       	std	Y+37, r26	; 0x25
    17a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a6:	6b a1       	ldd	r22, Y+35	; 0x23
    17a8:	7c a1       	ldd	r23, Y+36	; 0x24
    17aa:	8d a1       	ldd	r24, Y+37	; 0x25
    17ac:	9e a1       	ldd	r25, Y+38	; 0x26
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <LCD_init+0x1e0>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9a a3       	std	Y+34, r25	; 0x22
    17c4:	89 a3       	std	Y+33, r24	; 0x21
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <LCD_init+0x25e>
	else if (__tmp > 65535)
    17c8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ca:	7c a1       	ldd	r23, Y+36	; 0x24
    17cc:	8d a1       	ldd	r24, Y+37	; 0x25
    17ce:	9e a1       	ldd	r25, Y+38	; 0x26
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	4c f5       	brge	.+82     	; 0x1832 <LCD_init+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	6f a1       	ldd	r22, Y+39	; 0x27
    17e2:	78 a5       	ldd	r23, Y+40	; 0x28
    17e4:	89 a5       	ldd	r24, Y+41	; 0x29
    17e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9a a3       	std	Y+34, r25	; 0x22
    1806:	89 a3       	std	Y+33, r24	; 0x21
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <LCD_init+0x240>
    180a:	80 e9       	ldi	r24, 0x90	; 144
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	98 a3       	std	Y+32, r25	; 0x20
    1810:	8f 8f       	std	Y+31, r24	; 0x1f
    1812:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1814:	98 a1       	ldd	r25, Y+32	; 0x20
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <LCD_init+0x22e>
    181a:	98 a3       	std	Y+32, r25	; 0x20
    181c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181e:	89 a1       	ldd	r24, Y+33	; 0x21
    1820:	9a a1       	ldd	r25, Y+34	; 0x22
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	9a a3       	std	Y+34, r25	; 0x22
    1826:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1828:	89 a1       	ldd	r24, Y+33	; 0x21
    182a:	9a a1       	ldd	r25, Y+34	; 0x22
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	69 f7       	brne	.-38     	; 0x180a <LCD_init+0x222>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <LCD_init+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	6b a1       	ldd	r22, Y+35	; 0x23
    1834:	7c a1       	ldd	r23, Y+36	; 0x24
    1836:	8d a1       	ldd	r24, Y+37	; 0x25
    1838:	9e a1       	ldd	r25, Y+38	; 0x26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9a a3       	std	Y+34, r25	; 0x22
    1844:	89 a3       	std	Y+33, r24	; 0x21
    1846:	89 a1       	ldd	r24, Y+33	; 0x21
    1848:	9a a1       	ldd	r25, Y+34	; 0x22
    184a:	9e 8f       	std	Y+30, r25	; 0x1e
    184c:	8d 8f       	std	Y+29, r24	; 0x1d
    184e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1850:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_init+0x26a>
    1856:	9e 8f       	std	Y+30, r25	; 0x1e
    1858:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* sending the command: LCD_CLEAR_COMMAND which is configured
	 * in the lcd_cfg.h file. */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_sendCommand>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	bf e3       	ldi	r27, 0x3F	; 63
    1868:	89 8f       	std	Y+25, r24	; 0x19
    186a:	9a 8f       	std	Y+26, r25	; 0x1a
    186c:	ab 8f       	std	Y+27, r26	; 0x1b
    186e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	69 8d       	ldd	r22, Y+25	; 0x19
    1872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a e7       	ldi	r20, 0x7A	; 122
    187e:	55 e4       	ldi	r21, 0x45	; 69
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8d 8b       	std	Y+21, r24	; 0x15
    188a:	9e 8b       	std	Y+22, r25	; 0x16
    188c:	af 8b       	std	Y+23, r26	; 0x17
    188e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1890:	6d 89       	ldd	r22, Y+21	; 0x15
    1892:	7e 89       	ldd	r23, Y+22	; 0x16
    1894:	8f 89       	ldd	r24, Y+23	; 0x17
    1896:	98 8d       	ldd	r25, Y+24	; 0x18
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_init+0x2ca>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_init+0x348>
	else if (__tmp > 65535)
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_init+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	69 8d       	ldd	r22, Y+25	; 0x19
    18cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_init+0x32a>
    18f4:	80 e9       	ldi	r24, 0x90	; 144
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	9a 8b       	std	Y+18, r25	; 0x12
    18fa:	89 8b       	std	Y+17, r24	; 0x11
    18fc:	89 89       	ldd	r24, Y+17	; 0x11
    18fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_init+0x318>
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	9c 89       	ldd	r25, Y+20	; 0x14
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_init+0x30c>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_init+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	98 8b       	std	Y+16, r25	; 0x10
    1936:	8f 87       	std	Y+15, r24	; 0x0f
    1938:	8f 85       	ldd	r24, Y+15	; 0x0f
    193a:	98 89       	ldd	r25, Y+16	; 0x10
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_init+0x354>
    1940:	98 8b       	std	Y+16, r25	; 0x10
    1942:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/* sending the command: LCD_GO_TO_HOME which is configured
	 * in the lcd_cfg.h file. */
	LCD_sendCommand(LCD_GO_TO_HOME);
    1944:	86 e0       	ldi	r24, 0x06	; 6
    1946:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_sendCommand>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e8       	ldi	r26, 0x80	; 128
    1950:	bf e3       	ldi	r27, 0x3F	; 63
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a e7       	ldi	r20, 0x7A	; 122
    1968:	55 e4       	ldi	r21, 0x45	; 69
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <LCD_init+0x3b4>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <LCD_init+0x432>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <LCD_init+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <LCD_init+0x414>
    19de:	80 e9       	ldi	r24, 0x90	; 144
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_init+0x402>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <LCD_init+0x3f6>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <LCD_init+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_init+0x43e>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return E_OK;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
}
    1a30:	cc 5b       	subi	r28, 0xBC	; 188
    1a32:	df 4f       	sbci	r29, 0xFF	; 255
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <LCD_sendCommand>:
 * Function name: LCD_sendCommand
 * Arguments: uint8 command
 * Return: STATUS
 * Description: sending command to the LCD
 *****************************************************************/
STATUS LCD_sendCommand(uint8 command){
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	c9 56       	subi	r28, 0x69	; 105
    1a52:	d0 40       	sbci	r29, 0x00	; 0
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e7 59       	subi	r30, 0x97	; 151
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 83       	st	Z, r24
	uint8 LCD_dataPortReadBuffer;
	uint8 LCD_value;
	DIO_PinConfiguration RS = {LCD_CMD_PORT_ID , LCD_RS};
    1a66:	fe 01       	movw	r30, r28
    1a68:	eb 59       	subi	r30, 0x9B	; 155
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	10 82       	st	Z, r1
    1a6e:	fe 01       	movw	r30, r28
    1a70:	eb 59       	subi	r30, 0x9B	; 155
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	81 83       	std	Z+1, r24	; 0x01
	DIO_PinConfiguration EN = {LCD_CMD_PORT_ID , LCD_EN};
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e9 59       	subi	r30, 0x99	; 153
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	10 82       	st	Z, r1
    1a80:	fe 01       	movw	r30, r28
    1a82:	e9 59       	subi	r30, 0x99	; 153
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	81 83       	std	Z+1, r24	; 0x01

	DIO_writePin(&RS, LOGIC_LOW);
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	8b 59       	subi	r24, 0x9B	; 155
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e1 5a       	subi	r30, 0xA1	; 161
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e8       	ldi	r26, 0x80	; 128
    1aa2:	bf e3       	ldi	r27, 0x3F	; 63
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	a2 83       	std	Z+2, r26	; 0x02
    1aaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	8e 01       	movw	r16, r28
    1aae:	05 5a       	subi	r16, 0xA5	; 165
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e1 5a       	subi	r30, 0xA1	; 161
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a e7       	ldi	r20, 0x7A	; 122
    1ac6:	55 e4       	ldi	r21, 0x45	; 69
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	80 83       	st	Z, r24
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	a2 83       	std	Z+2, r26	; 0x02
    1ad8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ada:	fe 01       	movw	r30, r28
    1adc:	e5 5a       	subi	r30, 0xA5	; 165
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	44 f4       	brge	.+16     	; 0x1b08 <LCD_sendCommand+0xc4>
		__ticks = 1;
    1af8:	fe 01       	movw	r30, r28
    1afa:	e7 5a       	subi	r30, 0xA7	; 167
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	64 c0       	rjmp	.+200    	; 0x1bd0 <LCD_sendCommand+0x18c>
	else if (__tmp > 65535)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e5 5a       	subi	r30, 0xA5	; 165
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	0c f0       	brlt	.+2      	; 0x1b28 <LCD_sendCommand+0xe4>
    1b26:	43 c0       	rjmp	.+134    	; 0x1bae <LCD_sendCommand+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e1 5a       	subi	r30, 0xA1	; 161
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8e 01       	movw	r16, r28
    1b48:	07 5a       	subi	r16, 0xA7	; 167
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	f8 01       	movw	r30, r16
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
    1b5e:	1f c0       	rjmp	.+62     	; 0x1b9e <LCD_sendCommand+0x15a>
    1b60:	fe 01       	movw	r30, r28
    1b62:	e9 5a       	subi	r30, 0xA9	; 169
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 e9       	ldi	r24, 0x90	; 144
    1b68:	91 e0       	ldi	r25, 0x01	; 1
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e9 5a       	subi	r30, 0xA9	; 169
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_sendCommand+0x134>
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e9 5a       	subi	r30, 0xA9	; 169
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	de 01       	movw	r26, r28
    1b88:	a7 5a       	subi	r26, 0xA7	; 167
    1b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e7 5a       	subi	r30, 0xA7	; 167
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	11 96       	adiw	r26, 0x01	; 1
    1b9a:	9c 93       	st	X, r25
    1b9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e7 5a       	subi	r30, 0xA7	; 167
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	d1 f6       	brne	.-76     	; 0x1b60 <LCD_sendCommand+0x11c>
    1bac:	27 c0       	rjmp	.+78     	; 0x1bfc <LCD_sendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	8e 01       	movw	r16, r28
    1bb0:	07 5a       	subi	r16, 0xA7	; 167
    1bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e5 5a       	subi	r30, 0xA5	; 165
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	f8 01       	movw	r30, r16
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	de 01       	movw	r26, r28
    1bd2:	ab 5a       	subi	r26, 0xAB	; 171
    1bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e7 5a       	subi	r30, 0xA7	; 167
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	8d 93       	st	X+, r24
    1be2:	9c 93       	st	X, r25
    1be4:	fe 01       	movw	r30, r28
    1be6:	eb 5a       	subi	r30, 0xAB	; 171
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_sendCommand+0x1aa>
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	eb 5a       	subi	r30, 0xAB	; 171
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin(&EN, LOGIC_HIGH);
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	89 59       	subi	r24, 0x99	; 153
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ef 5a       	subi	r30, 0xAF	; 175
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e8       	ldi	r26, 0x80	; 128
    1c14:	bf e3       	ldi	r27, 0x3F	; 63
    1c16:	80 83       	st	Z, r24
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	a2 83       	std	Z+2, r26	; 0x02
    1c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	8e 01       	movw	r16, r28
    1c20:	03 5b       	subi	r16, 0xB3	; 179
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	ef 5a       	subi	r30, 0xAF	; 175
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a e7       	ldi	r20, 0x7A	; 122
    1c38:	55 e4       	ldi	r21, 0x45	; 69
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e3 5b       	subi	r30, 0xB3	; 179
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	44 f4       	brge	.+16     	; 0x1c7a <LCD_sendCommand+0x236>
		__ticks = 1;
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e5 5b       	subi	r30, 0xB5	; 181
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	64 c0       	rjmp	.+200    	; 0x1d42 <LCD_sendCommand+0x2fe>
	else if (__tmp > 65535)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e3 5b       	subi	r30, 0xB3	; 179
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <LCD_sendCommand+0x256>
    1c98:	43 c0       	rjmp	.+134    	; 0x1d20 <LCD_sendCommand+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ef 5a       	subi	r30, 0xAF	; 175
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8e 01       	movw	r16, r28
    1cba:	05 5b       	subi	r16, 0xB5	; 181
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	f8 01       	movw	r30, r16
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
    1cd0:	1f c0       	rjmp	.+62     	; 0x1d10 <LCD_sendCommand+0x2cc>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e7 5b       	subi	r30, 0xB7	; 183
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 e9       	ldi	r24, 0x90	; 144
    1cda:	91 e0       	ldi	r25, 0x01	; 1
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e7 5b       	subi	r30, 0xB7	; 183
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_sendCommand+0x2a6>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e7 5b       	subi	r30, 0xB7	; 183
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	de 01       	movw	r26, r28
    1cfa:	a5 5b       	subi	r26, 0xB5	; 181
    1cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e5 5b       	subi	r30, 0xB5	; 181
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	9c 93       	st	X, r25
    1d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	fe 01       	movw	r30, r28
    1d12:	e5 5b       	subi	r30, 0xB5	; 181
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	d1 f6       	brne	.-76     	; 0x1cd2 <LCD_sendCommand+0x28e>
    1d1e:	27 c0       	rjmp	.+78     	; 0x1d6e <LCD_sendCommand+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	8e 01       	movw	r16, r28
    1d22:	05 5b       	subi	r16, 0xB5	; 181
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e3 5b       	subi	r30, 0xB3	; 179
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	de 01       	movw	r26, r28
    1d44:	a9 5b       	subi	r26, 0xB9	; 185
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e5 5b       	subi	r30, 0xB5	; 181
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	8d 93       	st	X+, r24
    1d54:	9c 93       	st	X, r25
    1d56:	fe 01       	movw	r30, r28
    1d58:	e9 5b       	subi	r30, 0xB9	; 185
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_sendCommand+0x31c>
    1d64:	fe 01       	movw	r30, r28
    1d66:	e9 5b       	subi	r30, 0xB9	; 185
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
	_delay_ms(1);

	DIO_readPort(LCD_DATA_PORT_ID, &LCD_dataPortReadBuffer);
    1d6e:	9e 01       	movw	r18, r28
    1d70:	2c 59       	subi	r18, 0x9C	; 156
    1d72:	3f 4f       	sbci	r19, 0xFF	; 255
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	b9 01       	movw	r22, r18
    1d78:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_readPort>
	LCD_value = (LCD_dataPortReadBuffer&0xE8) | ((command & 0x70)>>4) | ((command & 0x80)>>3);
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ec 59       	subi	r30, 0x9C	; 156
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	28 2f       	mov	r18, r24
    1d86:	28 7e       	andi	r18, 0xE8	; 232
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e7 59       	subi	r30, 0x97	; 151
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	80 77       	andi	r24, 0x70	; 112
    1d96:	90 70       	andi	r25, 0x00	; 0
    1d98:	95 95       	asr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	95 95       	asr	r25
    1d9e:	87 95       	ror	r24
    1da0:	95 95       	asr	r25
    1da2:	87 95       	ror	r24
    1da4:	95 95       	asr	r25
    1da6:	87 95       	ror	r24
    1da8:	28 2b       	or	r18, r24
    1daa:	fe 01       	movw	r30, r28
    1dac:	e7 59       	subi	r30, 0x97	; 151
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	80 78       	andi	r24, 0x80	; 128
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	95 95       	asr	r25
    1dbc:	87 95       	ror	r24
    1dbe:	95 95       	asr	r25
    1dc0:	87 95       	ror	r24
    1dc2:	95 95       	asr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	82 2b       	or	r24, r18
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ed 59       	subi	r30, 0x9D	; 157
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 83       	st	Z, r24

	DIO_writePort(LCD_DATA_PORT_ID, LCD_value);
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ed 59       	subi	r30, 0x9D	; 157
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	60 81       	ld	r22, Z
    1dda:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_writePort>
    1dde:	fe 01       	movw	r30, r28
    1de0:	ed 5b       	subi	r30, 0xBD	; 189
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e8       	ldi	r26, 0x80	; 128
    1dea:	bf e3       	ldi	r27, 0x3F	; 63
    1dec:	80 83       	st	Z, r24
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	a2 83       	std	Z+2, r26	; 0x02
    1df2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df4:	8e 01       	movw	r16, r28
    1df6:	01 5c       	subi	r16, 0xC1	; 193
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	ed 5b       	subi	r30, 0xBD	; 189
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	55 e4       	ldi	r21, 0x45	; 69
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 83       	st	Z, r24
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	a2 83       	std	Z+2, r26	; 0x02
    1e20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e22:	fe 01       	movw	r30, r28
    1e24:	ff 96       	adiw	r30, 0x3f	; 63
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <LCD_sendCommand+0x404>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9e af       	std	Y+62, r25	; 0x3e
    1e44:	8d af       	std	Y+61, r24	; 0x3d
    1e46:	46 c0       	rjmp	.+140    	; 0x1ed4 <LCD_sendCommand+0x490>
	else if (__tmp > 65535)
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ff 96       	adiw	r30, 0x3f	; 63
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	64 f5       	brge	.+88     	; 0x1ebc <LCD_sendCommand+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e64:	fe 01       	movw	r30, r28
    1e66:	ed 5b       	subi	r30, 0xBD	; 189
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e af       	std	Y+62, r25	; 0x3e
    1e90:	8d af       	std	Y+61, r24	; 0x3d
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_sendCommand+0x46e>
    1e94:	80 e9       	ldi	r24, 0x90	; 144
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	9c af       	std	Y+60, r25	; 0x3c
    1e9a:	8b af       	std	Y+59, r24	; 0x3b
    1e9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_sendCommand+0x45c>
    1ea4:	9c af       	std	Y+60, r25	; 0x3c
    1ea6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eaa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9e af       	std	Y+62, r25	; 0x3e
    1eb0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_sendCommand+0x450>
    1eba:	16 c0       	rjmp	.+44     	; 0x1ee8 <LCD_sendCommand+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ff 96       	adiw	r30, 0x3f	; 63
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9e af       	std	Y+62, r25	; 0x3e
    1ed2:	8d af       	std	Y+61, r24	; 0x3d
    1ed4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed8:	9a af       	std	Y+58, r25	; 0x3a
    1eda:	89 af       	std	Y+57, r24	; 0x39
    1edc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ede:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_sendCommand+0x49c>
    1ee4:	9a af       	std	Y+58, r25	; 0x3a
    1ee6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_writePin(&EN, LOGIC_LOW);
    1ee8:	ce 01       	movw	r24, r28
    1eea:	89 59       	subi	r24, 0x99	; 153
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e8       	ldi	r26, 0x80	; 128
    1efa:	bf e3       	ldi	r27, 0x3F	; 63
    1efc:	8d ab       	std	Y+53, r24	; 0x35
    1efe:	9e ab       	std	Y+54, r25	; 0x36
    1f00:	af ab       	std	Y+55, r26	; 0x37
    1f02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f04:	6d a9       	ldd	r22, Y+53	; 0x35
    1f06:	7e a9       	ldd	r23, Y+54	; 0x36
    1f08:	8f a9       	ldd	r24, Y+55	; 0x37
    1f0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	55 e4       	ldi	r21, 0x45	; 69
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	89 ab       	std	Y+49, r24	; 0x31
    1f1e:	9a ab       	std	Y+50, r25	; 0x32
    1f20:	ab ab       	std	Y+51, r26	; 0x33
    1f22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f24:	69 a9       	ldd	r22, Y+49	; 0x31
    1f26:	7a a9       	ldd	r23, Y+50	; 0x32
    1f28:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	5f e3       	ldi	r21, 0x3F	; 63
    1f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <LCD_sendCommand+0x502>
		__ticks = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	98 ab       	std	Y+48, r25	; 0x30
    1f42:	8f a7       	std	Y+47, r24	; 0x2f
    1f44:	3f c0       	rjmp	.+126    	; 0x1fc4 <LCD_sendCommand+0x580>
	else if (__tmp > 65535)
    1f46:	69 a9       	ldd	r22, Y+49	; 0x31
    1f48:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	4c f5       	brge	.+82     	; 0x1fb0 <LCD_sendCommand+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f60:	7e a9       	ldd	r23, Y+54	; 0x36
    1f62:	8f a9       	ldd	r24, Y+55	; 0x37
    1f64:	98 ad       	ldd	r25, Y+56	; 0x38
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	51 e4       	ldi	r21, 0x41	; 65
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	98 ab       	std	Y+48, r25	; 0x30
    1f84:	8f a7       	std	Y+47, r24	; 0x2f
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <LCD_sendCommand+0x562>
    1f88:	80 e9       	ldi	r24, 0x90	; 144
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	9e a7       	std	Y+46, r25	; 0x2e
    1f8e:	8d a7       	std	Y+45, r24	; 0x2d
    1f90:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f92:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_sendCommand+0x550>
    1f98:	9e a7       	std	Y+46, r25	; 0x2e
    1f9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	98 ab       	std	Y+48, r25	; 0x30
    1fa4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	69 f7       	brne	.-38     	; 0x1f88 <LCD_sendCommand+0x544>
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <LCD_sendCommand+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	98 ab       	std	Y+48, r25	; 0x30
    1fc2:	8f a7       	std	Y+47, r24	; 0x2f
    1fc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc8:	9c a7       	std	Y+44, r25	; 0x2c
    1fca:	8b a7       	std	Y+43, r24	; 0x2b
    1fcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fce:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_sendCommand+0x58c>
    1fd4:	9c a7       	std	Y+44, r25	; 0x2c
    1fd6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	DIO_writePin(&EN, LOGIC_HIGH);
    1fd8:	ce 01       	movw	r24, r28
    1fda:	89 59       	subi	r24, 0x99	; 153
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e8       	ldi	r26, 0x80	; 128
    1fea:	bf e3       	ldi	r27, 0x3F	; 63
    1fec:	8f a3       	std	Y+39, r24	; 0x27
    1fee:	98 a7       	std	Y+40, r25	; 0x28
    1ff0:	a9 a7       	std	Y+41, r26	; 0x29
    1ff2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff8:	89 a5       	ldd	r24, Y+41	; 0x29
    1ffa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a e7       	ldi	r20, 0x7A	; 122
    2002:	55 e4       	ldi	r21, 0x45	; 69
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8b a3       	std	Y+35, r24	; 0x23
    200e:	9c a3       	std	Y+36, r25	; 0x24
    2010:	ad a3       	std	Y+37, r26	; 0x25
    2012:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2014:	6b a1       	ldd	r22, Y+35	; 0x23
    2016:	7c a1       	ldd	r23, Y+36	; 0x24
    2018:	8d a1       	ldd	r24, Y+37	; 0x25
    201a:	9e a1       	ldd	r25, Y+38	; 0x26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <LCD_sendCommand+0x5f2>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	89 a3       	std	Y+33, r24	; 0x21
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <LCD_sendCommand+0x670>
	else if (__tmp > 65535)
    2036:	6b a1       	ldd	r22, Y+35	; 0x23
    2038:	7c a1       	ldd	r23, Y+36	; 0x24
    203a:	8d a1       	ldd	r24, Y+37	; 0x25
    203c:	9e a1       	ldd	r25, Y+38	; 0x26
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <LCD_sendCommand+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6f a1       	ldd	r22, Y+39	; 0x27
    2050:	78 a5       	ldd	r23, Y+40	; 0x28
    2052:	89 a5       	ldd	r24, Y+41	; 0x29
    2054:	9a a5       	ldd	r25, Y+42	; 0x2a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9a a3       	std	Y+34, r25	; 0x22
    2074:	89 a3       	std	Y+33, r24	; 0x21
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <LCD_sendCommand+0x652>
    2078:	80 e9       	ldi	r24, 0x90	; 144
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	98 a3       	std	Y+32, r25	; 0x20
    207e:	8f 8f       	std	Y+31, r24	; 0x1f
    2080:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2082:	98 a1       	ldd	r25, Y+32	; 0x20
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_sendCommand+0x640>
    2088:	98 a3       	std	Y+32, r25	; 0x20
    208a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	89 a1       	ldd	r24, Y+33	; 0x21
    208e:	9a a1       	ldd	r25, Y+34	; 0x22
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	89 a1       	ldd	r24, Y+33	; 0x21
    2098:	9a a1       	ldd	r25, Y+34	; 0x22
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <LCD_sendCommand+0x634>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <LCD_sendCommand+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6b a1       	ldd	r22, Y+35	; 0x23
    20a2:	7c a1       	ldd	r23, Y+36	; 0x24
    20a4:	8d a1       	ldd	r24, Y+37	; 0x25
    20a6:	9e a1       	ldd	r25, Y+38	; 0x26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9a a3       	std	Y+34, r25	; 0x22
    20b2:	89 a3       	std	Y+33, r24	; 0x21
    20b4:	89 a1       	ldd	r24, Y+33	; 0x21
    20b6:	9a a1       	ldd	r25, Y+34	; 0x22
    20b8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ba:	8d 8f       	std	Y+29, r24	; 0x1d
    20bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_sendCommand+0x67c>
    20c4:	9e 8f       	std	Y+30, r25	; 0x1e
    20c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_readPort(LCD_DATA_PORT_ID, &LCD_dataPortReadBuffer);
    20c8:	9e 01       	movw	r18, r28
    20ca:	2c 59       	subi	r18, 0x9C	; 156
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	b9 01       	movw	r22, r18
    20d2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_readPort>
	LCD_value = (LCD_dataPortReadBuffer&0xE8) | (command & 0x07) | ((command & 0x08)<<1);
    20d6:	fe 01       	movw	r30, r28
    20d8:	ec 59       	subi	r30, 0x9C	; 156
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	98 2f       	mov	r25, r24
    20e0:	98 7e       	andi	r25, 0xE8	; 232
    20e2:	fe 01       	movw	r30, r28
    20e4:	e7 59       	subi	r30, 0x97	; 151
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	87 70       	andi	r24, 0x07	; 7
    20ec:	29 2f       	mov	r18, r25
    20ee:	28 2b       	or	r18, r24
    20f0:	fe 01       	movw	r30, r28
    20f2:	e7 59       	subi	r30, 0x97	; 151
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	88 70       	andi	r24, 0x08	; 8
    20fe:	90 70       	andi	r25, 0x00	; 0
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	82 2b       	or	r24, r18
    2106:	fe 01       	movw	r30, r28
    2108:	ed 59       	subi	r30, 0x9D	; 157
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 83       	st	Z, r24

	DIO_writePort(LCD_DATA_PORT_ID, LCD_value);
    210e:	fe 01       	movw	r30, r28
    2110:	ed 59       	subi	r30, 0x9D	; 157
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	60 81       	ld	r22, Z
    2118:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_writePort>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	a0 e8       	ldi	r26, 0x80	; 128
    2122:	bf e3       	ldi	r27, 0x3F	; 63
    2124:	89 8f       	std	Y+25, r24	; 0x19
    2126:	9a 8f       	std	Y+26, r25	; 0x1a
    2128:	ab 8f       	std	Y+27, r26	; 0x1b
    212a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212c:	69 8d       	ldd	r22, Y+25	; 0x19
    212e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4a e7       	ldi	r20, 0x7A	; 122
    213a:	55 e4       	ldi	r21, 0x45	; 69
    213c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	8d 8b       	std	Y+21, r24	; 0x15
    2146:	9e 8b       	std	Y+22, r25	; 0x16
    2148:	af 8b       	std	Y+23, r26	; 0x17
    214a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e8       	ldi	r20, 0x80	; 128
    215a:	5f e3       	ldi	r21, 0x3F	; 63
    215c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2160:	88 23       	and	r24, r24
    2162:	2c f4       	brge	.+10     	; 0x216e <LCD_sendCommand+0x72a>
		__ticks = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
    216c:	3f c0       	rjmp	.+126    	; 0x21ec <LCD_sendCommand+0x7a8>
	else if (__tmp > 65535)
    216e:	6d 89       	ldd	r22, Y+21	; 0x15
    2170:	7e 89       	ldd	r23, Y+22	; 0x16
    2172:	8f 89       	ldd	r24, Y+23	; 0x17
    2174:	98 8d       	ldd	r25, Y+24	; 0x18
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	3f ef       	ldi	r19, 0xFF	; 255
    217a:	4f e7       	ldi	r20, 0x7F	; 127
    217c:	57 e4       	ldi	r21, 0x47	; 71
    217e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2182:	18 16       	cp	r1, r24
    2184:	4c f5       	brge	.+82     	; 0x21d8 <LCD_sendCommand+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2186:	69 8d       	ldd	r22, Y+25	; 0x19
    2188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    218a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    218c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	51 e4       	ldi	r21, 0x41	; 65
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	9c 8b       	std	Y+20, r25	; 0x14
    21ac:	8b 8b       	std	Y+19, r24	; 0x13
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <LCD_sendCommand+0x78a>
    21b0:	80 e9       	ldi	r24, 0x90	; 144
    21b2:	91 e0       	ldi	r25, 0x01	; 1
    21b4:	9a 8b       	std	Y+18, r25	; 0x12
    21b6:	89 8b       	std	Y+17, r24	; 0x11
    21b8:	89 89       	ldd	r24, Y+17	; 0x11
    21ba:	9a 89       	ldd	r25, Y+18	; 0x12
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_sendCommand+0x778>
    21c0:	9a 8b       	std	Y+18, r25	; 0x12
    21c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	9c 8b       	std	Y+20, r25	; 0x14
    21cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	69 f7       	brne	.-38     	; 0x21b0 <LCD_sendCommand+0x76c>
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <LCD_sendCommand+0x7bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d8:	6d 89       	ldd	r22, Y+21	; 0x15
    21da:	7e 89       	ldd	r23, Y+22	; 0x16
    21dc:	8f 89       	ldd	r24, Y+23	; 0x17
    21de:	98 8d       	ldd	r25, Y+24	; 0x18
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	98 8b       	std	Y+16, r25	; 0x10
    21f2:	8f 87       	std	Y+15, r24	; 0x0f
    21f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f6:	98 89       	ldd	r25, Y+16	; 0x10
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_sendCommand+0x7b4>
    21fc:	98 8b       	std	Y+16, r25	; 0x10
    21fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_writePin(&EN, LOGIC_LOW);
    2200:	ce 01       	movw	r24, r28
    2202:	89 59       	subi	r24, 0x99	; 153
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a0 e8       	ldi	r26, 0x80	; 128
    2212:	bf e3       	ldi	r27, 0x3F	; 63
    2214:	8b 87       	std	Y+11, r24	; 0x0b
    2216:	9c 87       	std	Y+12, r25	; 0x0c
    2218:	ad 87       	std	Y+13, r26	; 0x0d
    221a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221c:	6b 85       	ldd	r22, Y+11	; 0x0b
    221e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2220:	8d 85       	ldd	r24, Y+13	; 0x0d
    2222:	9e 85       	ldd	r25, Y+14	; 0x0e
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a e7       	ldi	r20, 0x7A	; 122
    222a:	55 e4       	ldi	r21, 0x45	; 69
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8f 83       	std	Y+7, r24	; 0x07
    2236:	98 87       	std	Y+8, r25	; 0x08
    2238:	a9 87       	std	Y+9, r26	; 0x09
    223a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    223c:	6f 81       	ldd	r22, Y+7	; 0x07
    223e:	78 85       	ldd	r23, Y+8	; 0x08
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e8       	ldi	r20, 0x80	; 128
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2250:	88 23       	and	r24, r24
    2252:	2c f4       	brge	.+10     	; 0x225e <LCD_sendCommand+0x81a>
		__ticks = 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	3f c0       	rjmp	.+126    	; 0x22dc <LCD_sendCommand+0x898>
	else if (__tmp > 65535)
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	4c f5       	brge	.+82     	; 0x22c8 <LCD_sendCommand+0x884>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	6b 85       	ldd	r22, Y+11	; 0x0b
    2278:	7c 85       	ldd	r23, Y+12	; 0x0c
    227a:	8d 85       	ldd	r24, Y+13	; 0x0d
    227c:	9e 85       	ldd	r25, Y+14	; 0x0e
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e2       	ldi	r20, 0x20	; 32
    2284:	51 e4       	ldi	r21, 0x41	; 65
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	0f c0       	rjmp	.+30     	; 0x22be <LCD_sendCommand+0x87a>
    22a0:	80 e9       	ldi	r24, 0x90	; 144
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	9c 81       	ldd	r25, Y+4	; 0x04
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <LCD_sendCommand+0x868>
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	69 f7       	brne	.-38     	; 0x22a0 <LCD_sendCommand+0x85c>
    22c6:	14 c0       	rjmp	.+40     	; 0x22f0 <LCD_sendCommand+0x8ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ca:	78 85       	ldd	r23, Y+8	; 0x08
    22cc:	89 85       	ldd	r24, Y+9	; 0x09
    22ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <LCD_sendCommand+0x8a4>
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return E_OK;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
}
    22f2:	c7 59       	subi	r28, 0x97	; 151
    22f4:	df 4f       	sbci	r29, 0xFF	; 255
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <LCD_displayCharacter>:
 * Function name: LCD_displayCharacter
 * Arguments: uint8 data
 * Return: STATUS
 * Description: displaying a character on the LCD
 *****************************************************************/
STATUS LCD_displayCharacter(uint8 data){
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	c9 56       	subi	r28, 0x69	; 105
    2318:	d0 40       	sbci	r29, 0x00	; 0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	fe 01       	movw	r30, r28
    2326:	e7 59       	subi	r30, 0x97	; 151
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 83       	st	Z, r24
	uint8 LCD_dataPortReadBuffer;
	uint8 LCD_value;
	DIO_PinConfiguration RS = {LCD_CMD_PORT_ID , LCD_RS};
    232c:	fe 01       	movw	r30, r28
    232e:	eb 59       	subi	r30, 0x9B	; 155
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	10 82       	st	Z, r1
    2334:	fe 01       	movw	r30, r28
    2336:	eb 59       	subi	r30, 0x9B	; 155
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	81 83       	std	Z+1, r24	; 0x01
	DIO_PinConfiguration EN = {LCD_CMD_PORT_ID , LCD_EN};
    233e:	fe 01       	movw	r30, r28
    2340:	e9 59       	subi	r30, 0x99	; 153
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	10 82       	st	Z, r1
    2346:	fe 01       	movw	r30, r28
    2348:	e9 59       	subi	r30, 0x99	; 153
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	82 e0       	ldi	r24, 0x02	; 2
    234e:	81 83       	std	Z+1, r24	; 0x01

	DIO_writePin(&RS, LOGIC_HIGH);
    2350:	ce 01       	movw	r24, r28
    2352:	8b 59       	subi	r24, 0x9B	; 155
    2354:	9f 4f       	sbci	r25, 0xFF	; 255
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    235c:	fe 01       	movw	r30, r28
    235e:	e1 5a       	subi	r30, 0xA1	; 161
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e8       	ldi	r26, 0x80	; 128
    2368:	bf e3       	ldi	r27, 0x3F	; 63
    236a:	80 83       	st	Z, r24
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	a2 83       	std	Z+2, r26	; 0x02
    2370:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	8e 01       	movw	r16, r28
    2374:	05 5a       	subi	r16, 0xA5	; 165
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	fe 01       	movw	r30, r28
    237a:	e1 5a       	subi	r30, 0xA1	; 161
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a e7       	ldi	r20, 0x7A	; 122
    238c:	55 e4       	ldi	r21, 0x45	; 69
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	80 83       	st	Z, r24
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	a2 83       	std	Z+2, r26	; 0x02
    239e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a0:	fe 01       	movw	r30, r28
    23a2:	e5 5a       	subi	r30, 0xA5	; 165
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	44 f4       	brge	.+16     	; 0x23ce <LCD_displayCharacter+0xc4>
		__ticks = 1;
    23be:	fe 01       	movw	r30, r28
    23c0:	e7 5a       	subi	r30, 0xA7	; 167
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
    23cc:	64 c0       	rjmp	.+200    	; 0x2496 <LCD_displayCharacter+0x18c>
	else if (__tmp > 65535)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e5 5a       	subi	r30, 0xA5	; 165
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	0c f0       	brlt	.+2      	; 0x23ee <LCD_displayCharacter+0xe4>
    23ec:	43 c0       	rjmp	.+134    	; 0x2474 <LCD_displayCharacter+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	fe 01       	movw	r30, r28
    23f0:	e1 5a       	subi	r30, 0xA1	; 161
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	8e 01       	movw	r16, r28
    240e:	07 5a       	subi	r16, 0xA7	; 167
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	f8 01       	movw	r30, r16
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
    2424:	1f c0       	rjmp	.+62     	; 0x2464 <LCD_displayCharacter+0x15a>
    2426:	fe 01       	movw	r30, r28
    2428:	e9 5a       	subi	r30, 0xA9	; 169
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 e9       	ldi	r24, 0x90	; 144
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
    2434:	fe 01       	movw	r30, r28
    2436:	e9 5a       	subi	r30, 0xA9	; 169
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_displayCharacter+0x134>
    2442:	fe 01       	movw	r30, r28
    2444:	e9 5a       	subi	r30, 0xA9	; 169
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	de 01       	movw	r26, r28
    244e:	a7 5a       	subi	r26, 0xA7	; 167
    2450:	bf 4f       	sbci	r27, 0xFF	; 255
    2452:	fe 01       	movw	r30, r28
    2454:	e7 5a       	subi	r30, 0xA7	; 167
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	11 96       	adiw	r26, 0x01	; 1
    2460:	9c 93       	st	X, r25
    2462:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2464:	fe 01       	movw	r30, r28
    2466:	e7 5a       	subi	r30, 0xA7	; 167
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	91 81       	ldd	r25, Z+1	; 0x01
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	d1 f6       	brne	.-76     	; 0x2426 <LCD_displayCharacter+0x11c>
    2472:	27 c0       	rjmp	.+78     	; 0x24c2 <LCD_displayCharacter+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	8e 01       	movw	r16, r28
    2476:	07 5a       	subi	r16, 0xA7	; 167
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	fe 01       	movw	r30, r28
    247c:	e5 5a       	subi	r30, 0xA5	; 165
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	f8 01       	movw	r30, r16
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
    2496:	de 01       	movw	r26, r28
    2498:	ab 5a       	subi	r26, 0xAB	; 171
    249a:	bf 4f       	sbci	r27, 0xFF	; 255
    249c:	fe 01       	movw	r30, r28
    249e:	e7 5a       	subi	r30, 0xA7	; 167
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	8d 93       	st	X+, r24
    24a8:	9c 93       	st	X, r25
    24aa:	fe 01       	movw	r30, r28
    24ac:	eb 5a       	subi	r30, 0xAB	; 171
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_displayCharacter+0x1aa>
    24b8:	fe 01       	movw	r30, r28
    24ba:	eb 5a       	subi	r30, 0xAB	; 171
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin(&EN, LOGIC_HIGH);
    24c2:	ce 01       	movw	r24, r28
    24c4:	89 59       	subi	r24, 0x99	; 153
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	61 e0       	ldi	r22, 0x01	; 1
    24ca:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    24ce:	fe 01       	movw	r30, r28
    24d0:	ef 5a       	subi	r30, 0xAF	; 175
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a0 e8       	ldi	r26, 0x80	; 128
    24da:	bf e3       	ldi	r27, 0x3F	; 63
    24dc:	80 83       	st	Z, r24
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	a2 83       	std	Z+2, r26	; 0x02
    24e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	8e 01       	movw	r16, r28
    24e6:	03 5b       	subi	r16, 0xB3	; 179
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	ef 5a       	subi	r30, 0xAF	; 175
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a e7       	ldi	r20, 0x7A	; 122
    24fe:	55 e4       	ldi	r21, 0x45	; 69
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	f8 01       	movw	r30, r16
    250a:	80 83       	st	Z, r24
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	a2 83       	std	Z+2, r26	; 0x02
    2510:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2512:	fe 01       	movw	r30, r28
    2514:	e3 5b       	subi	r30, 0xB3	; 179
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	44 f4       	brge	.+16     	; 0x2540 <LCD_displayCharacter+0x236>
		__ticks = 1;
    2530:	fe 01       	movw	r30, r28
    2532:	e5 5b       	subi	r30, 0xB5	; 181
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    253e:	64 c0       	rjmp	.+200    	; 0x2608 <LCD_displayCharacter+0x2fe>
	else if (__tmp > 65535)
    2540:	fe 01       	movw	r30, r28
    2542:	e3 5b       	subi	r30, 0xB3	; 179
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	0c f0       	brlt	.+2      	; 0x2560 <LCD_displayCharacter+0x256>
    255e:	43 c0       	rjmp	.+134    	; 0x25e6 <LCD_displayCharacter+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	fe 01       	movw	r30, r28
    2562:	ef 5a       	subi	r30, 0xAF	; 175
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	8e 01       	movw	r16, r28
    2580:	05 5b       	subi	r16, 0xB5	; 181
    2582:	1f 4f       	sbci	r17, 0xFF	; 255
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	f8 01       	movw	r30, r16
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
    2596:	1f c0       	rjmp	.+62     	; 0x25d6 <LCD_displayCharacter+0x2cc>
    2598:	fe 01       	movw	r30, r28
    259a:	e7 5b       	subi	r30, 0xB7	; 183
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 e9       	ldi	r24, 0x90	; 144
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	fe 01       	movw	r30, r28
    25a8:	e7 5b       	subi	r30, 0xB7	; 183
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_displayCharacter+0x2a6>
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 5b       	subi	r30, 0xB7	; 183
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	de 01       	movw	r26, r28
    25c0:	a5 5b       	subi	r26, 0xB5	; 181
    25c2:	bf 4f       	sbci	r27, 0xFF	; 255
    25c4:	fe 01       	movw	r30, r28
    25c6:	e5 5b       	subi	r30, 0xB5	; 181
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	11 96       	adiw	r26, 0x01	; 1
    25d2:	9c 93       	st	X, r25
    25d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	fe 01       	movw	r30, r28
    25d8:	e5 5b       	subi	r30, 0xB5	; 181
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	d1 f6       	brne	.-76     	; 0x2598 <LCD_displayCharacter+0x28e>
    25e4:	27 c0       	rjmp	.+78     	; 0x2634 <LCD_displayCharacter+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	8e 01       	movw	r16, r28
    25e8:	05 5b       	subi	r16, 0xB5	; 181
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	fe 01       	movw	r30, r28
    25ee:	e3 5b       	subi	r30, 0xB3	; 179
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	f8 01       	movw	r30, r16
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
    2608:	de 01       	movw	r26, r28
    260a:	a9 5b       	subi	r26, 0xB9	; 185
    260c:	bf 4f       	sbci	r27, 0xFF	; 255
    260e:	fe 01       	movw	r30, r28
    2610:	e5 5b       	subi	r30, 0xB5	; 181
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	8d 93       	st	X+, r24
    261a:	9c 93       	st	X, r25
    261c:	fe 01       	movw	r30, r28
    261e:	e9 5b       	subi	r30, 0xB9	; 185
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <LCD_displayCharacter+0x31c>
    262a:	fe 01       	movw	r30, r28
    262c:	e9 5b       	subi	r30, 0xB9	; 185
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	80 83       	st	Z, r24
	_delay_ms(1);

	DIO_readPort(LCD_DATA_PORT_ID, &LCD_dataPortReadBuffer);
    2634:	9e 01       	movw	r18, r28
    2636:	2c 59       	subi	r18, 0x9C	; 156
    2638:	3f 4f       	sbci	r19, 0xFF	; 255
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	b9 01       	movw	r22, r18
    263e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_readPort>
	LCD_value = (LCD_dataPortReadBuffer&0xE8) | ((data & 0x70)>>4) | ((data & 0x80)>>3);
    2642:	fe 01       	movw	r30, r28
    2644:	ec 59       	subi	r30, 0x9C	; 156
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 81       	ld	r24, Z
    264a:	28 2f       	mov	r18, r24
    264c:	28 7e       	andi	r18, 0xE8	; 232
    264e:	fe 01       	movw	r30, r28
    2650:	e7 59       	subi	r30, 0x97	; 151
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	88 2f       	mov	r24, r24
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	80 77       	andi	r24, 0x70	; 112
    265c:	90 70       	andi	r25, 0x00	; 0
    265e:	95 95       	asr	r25
    2660:	87 95       	ror	r24
    2662:	95 95       	asr	r25
    2664:	87 95       	ror	r24
    2666:	95 95       	asr	r25
    2668:	87 95       	ror	r24
    266a:	95 95       	asr	r25
    266c:	87 95       	ror	r24
    266e:	28 2b       	or	r18, r24
    2670:	fe 01       	movw	r30, r28
    2672:	e7 59       	subi	r30, 0x97	; 151
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	88 2f       	mov	r24, r24
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	80 78       	andi	r24, 0x80	; 128
    267e:	90 70       	andi	r25, 0x00	; 0
    2680:	95 95       	asr	r25
    2682:	87 95       	ror	r24
    2684:	95 95       	asr	r25
    2686:	87 95       	ror	r24
    2688:	95 95       	asr	r25
    268a:	87 95       	ror	r24
    268c:	82 2b       	or	r24, r18
    268e:	fe 01       	movw	r30, r28
    2690:	ed 59       	subi	r30, 0x9D	; 157
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 83       	st	Z, r24

	DIO_writePort(LCD_DATA_PORT_ID, LCD_value);
    2696:	fe 01       	movw	r30, r28
    2698:	ed 59       	subi	r30, 0x9D	; 157
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	60 81       	ld	r22, Z
    26a0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_writePort>
    26a4:	fe 01       	movw	r30, r28
    26a6:	ed 5b       	subi	r30, 0xBD	; 189
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	a0 e8       	ldi	r26, 0x80	; 128
    26b0:	bf e3       	ldi	r27, 0x3F	; 63
    26b2:	80 83       	st	Z, r24
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	a2 83       	std	Z+2, r26	; 0x02
    26b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ba:	8e 01       	movw	r16, r28
    26bc:	01 5c       	subi	r16, 0xC1	; 193
    26be:	1f 4f       	sbci	r17, 0xFF	; 255
    26c0:	fe 01       	movw	r30, r28
    26c2:	ed 5b       	subi	r30, 0xBD	; 189
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a e7       	ldi	r20, 0x7A	; 122
    26d4:	55 e4       	ldi	r21, 0x45	; 69
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	80 83       	st	Z, r24
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	a2 83       	std	Z+2, r26	; 0x02
    26e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e8:	fe 01       	movw	r30, r28
    26ea:	ff 96       	adiw	r30, 0x3f	; 63
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2700:	88 23       	and	r24, r24
    2702:	2c f4       	brge	.+10     	; 0x270e <LCD_displayCharacter+0x404>
		__ticks = 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9e af       	std	Y+62, r25	; 0x3e
    270a:	8d af       	std	Y+61, r24	; 0x3d
    270c:	46 c0       	rjmp	.+140    	; 0x279a <LCD_displayCharacter+0x490>
	else if (__tmp > 65535)
    270e:	fe 01       	movw	r30, r28
    2710:	ff 96       	adiw	r30, 0x3f	; 63
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	64 f5       	brge	.+88     	; 0x2782 <LCD_displayCharacter+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	fe 01       	movw	r30, r28
    272c:	ed 5b       	subi	r30, 0xBD	; 189
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9e af       	std	Y+62, r25	; 0x3e
    2756:	8d af       	std	Y+61, r24	; 0x3d
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <LCD_displayCharacter+0x46e>
    275a:	80 e9       	ldi	r24, 0x90	; 144
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	9c af       	std	Y+60, r25	; 0x3c
    2760:	8b af       	std	Y+59, r24	; 0x3b
    2762:	8b ad       	ldd	r24, Y+59	; 0x3b
    2764:	9c ad       	ldd	r25, Y+60	; 0x3c
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_displayCharacter+0x45c>
    276a:	9c af       	std	Y+60, r25	; 0x3c
    276c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2770:	9e ad       	ldd	r25, Y+62	; 0x3e
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9e af       	std	Y+62, r25	; 0x3e
    2776:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8d ad       	ldd	r24, Y+61	; 0x3d
    277a:	9e ad       	ldd	r25, Y+62	; 0x3e
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <LCD_displayCharacter+0x450>
    2780:	16 c0       	rjmp	.+44     	; 0x27ae <LCD_displayCharacter+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	fe 01       	movw	r30, r28
    2784:	ff 96       	adiw	r30, 0x3f	; 63
    2786:	60 81       	ld	r22, Z
    2788:	71 81       	ldd	r23, Z+1	; 0x01
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e af       	std	Y+62, r25	; 0x3e
    2798:	8d af       	std	Y+61, r24	; 0x3d
    279a:	8d ad       	ldd	r24, Y+61	; 0x3d
    279c:	9e ad       	ldd	r25, Y+62	; 0x3e
    279e:	9a af       	std	Y+58, r25	; 0x3a
    27a0:	89 af       	std	Y+57, r24	; 0x39
    27a2:	89 ad       	ldd	r24, Y+57	; 0x39
    27a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_displayCharacter+0x49c>
    27aa:	9a af       	std	Y+58, r25	; 0x3a
    27ac:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_writePin(&EN, LOGIC_LOW);
    27ae:	ce 01       	movw	r24, r28
    27b0:	89 59       	subi	r24, 0x99	; 153
    27b2:	9f 4f       	sbci	r25, 0xFF	; 255
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a0 e8       	ldi	r26, 0x80	; 128
    27c0:	bf e3       	ldi	r27, 0x3F	; 63
    27c2:	8d ab       	std	Y+53, r24	; 0x35
    27c4:	9e ab       	std	Y+54, r25	; 0x36
    27c6:	af ab       	std	Y+55, r26	; 0x37
    27c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ca:	6d a9       	ldd	r22, Y+53	; 0x35
    27cc:	7e a9       	ldd	r23, Y+54	; 0x36
    27ce:	8f a9       	ldd	r24, Y+55	; 0x37
    27d0:	98 ad       	ldd	r25, Y+56	; 0x38
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a e7       	ldi	r20, 0x7A	; 122
    27d8:	55 e4       	ldi	r21, 0x45	; 69
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	89 ab       	std	Y+49, r24	; 0x31
    27e4:	9a ab       	std	Y+50, r25	; 0x32
    27e6:	ab ab       	std	Y+51, r26	; 0x33
    27e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27ea:	69 a9       	ldd	r22, Y+49	; 0x31
    27ec:	7a a9       	ldd	r23, Y+50	; 0x32
    27ee:	8b a9       	ldd	r24, Y+51	; 0x33
    27f0:	9c a9       	ldd	r25, Y+52	; 0x34
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e8       	ldi	r20, 0x80	; 128
    27f8:	5f e3       	ldi	r21, 0x3F	; 63
    27fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fe:	88 23       	and	r24, r24
    2800:	2c f4       	brge	.+10     	; 0x280c <LCD_displayCharacter+0x502>
		__ticks = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	98 ab       	std	Y+48, r25	; 0x30
    2808:	8f a7       	std	Y+47, r24	; 0x2f
    280a:	3f c0       	rjmp	.+126    	; 0x288a <LCD_displayCharacter+0x580>
	else if (__tmp > 65535)
    280c:	69 a9       	ldd	r22, Y+49	; 0x31
    280e:	7a a9       	ldd	r23, Y+50	; 0x32
    2810:	8b a9       	ldd	r24, Y+51	; 0x33
    2812:	9c a9       	ldd	r25, Y+52	; 0x34
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	3f ef       	ldi	r19, 0xFF	; 255
    2818:	4f e7       	ldi	r20, 0x7F	; 127
    281a:	57 e4       	ldi	r21, 0x47	; 71
    281c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2820:	18 16       	cp	r1, r24
    2822:	4c f5       	brge	.+82     	; 0x2876 <LCD_displayCharacter+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2824:	6d a9       	ldd	r22, Y+53	; 0x35
    2826:	7e a9       	ldd	r23, Y+54	; 0x36
    2828:	8f a9       	ldd	r24, Y+55	; 0x37
    282a:	98 ad       	ldd	r25, Y+56	; 0x38
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e2       	ldi	r20, 0x20	; 32
    2832:	51 e4       	ldi	r21, 0x41	; 65
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	98 ab       	std	Y+48, r25	; 0x30
    284a:	8f a7       	std	Y+47, r24	; 0x2f
    284c:	0f c0       	rjmp	.+30     	; 0x286c <LCD_displayCharacter+0x562>
    284e:	80 e9       	ldi	r24, 0x90	; 144
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	9e a7       	std	Y+46, r25	; 0x2e
    2854:	8d a7       	std	Y+45, r24	; 0x2d
    2856:	8d a5       	ldd	r24, Y+45	; 0x2d
    2858:	9e a5       	ldd	r25, Y+46	; 0x2e
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCD_displayCharacter+0x550>
    285e:	9e a7       	std	Y+46, r25	; 0x2e
    2860:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	8f a5       	ldd	r24, Y+47	; 0x2f
    2864:	98 a9       	ldd	r25, Y+48	; 0x30
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	98 ab       	std	Y+48, r25	; 0x30
    286a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286c:	8f a5       	ldd	r24, Y+47	; 0x2f
    286e:	98 a9       	ldd	r25, Y+48	; 0x30
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	69 f7       	brne	.-38     	; 0x284e <LCD_displayCharacter+0x544>
    2874:	14 c0       	rjmp	.+40     	; 0x289e <LCD_displayCharacter+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2876:	69 a9       	ldd	r22, Y+49	; 0x31
    2878:	7a a9       	ldd	r23, Y+50	; 0x32
    287a:	8b a9       	ldd	r24, Y+51	; 0x33
    287c:	9c a9       	ldd	r25, Y+52	; 0x34
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	98 ab       	std	Y+48, r25	; 0x30
    2888:	8f a7       	std	Y+47, r24	; 0x2f
    288a:	8f a5       	ldd	r24, Y+47	; 0x2f
    288c:	98 a9       	ldd	r25, Y+48	; 0x30
    288e:	9c a7       	std	Y+44, r25	; 0x2c
    2890:	8b a7       	std	Y+43, r24	; 0x2b
    2892:	8b a5       	ldd	r24, Y+43	; 0x2b
    2894:	9c a5       	ldd	r25, Y+44	; 0x2c
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <LCD_displayCharacter+0x58c>
    289a:	9c a7       	std	Y+44, r25	; 0x2c
    289c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	DIO_writePin(&EN, LOGIC_HIGH);
    289e:	ce 01       	movw	r24, r28
    28a0:	89 59       	subi	r24, 0x99	; 153
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	61 e0       	ldi	r22, 0x01	; 1
    28a6:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e8       	ldi	r26, 0x80	; 128
    28b0:	bf e3       	ldi	r27, 0x3F	; 63
    28b2:	8f a3       	std	Y+39, r24	; 0x27
    28b4:	98 a7       	std	Y+40, r25	; 0x28
    28b6:	a9 a7       	std	Y+41, r26	; 0x29
    28b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	6f a1       	ldd	r22, Y+39	; 0x27
    28bc:	78 a5       	ldd	r23, Y+40	; 0x28
    28be:	89 a5       	ldd	r24, Y+41	; 0x29
    28c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	55 e4       	ldi	r21, 0x45	; 69
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8b a3       	std	Y+35, r24	; 0x23
    28d4:	9c a3       	std	Y+36, r25	; 0x24
    28d6:	ad a3       	std	Y+37, r26	; 0x25
    28d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28da:	6b a1       	ldd	r22, Y+35	; 0x23
    28dc:	7c a1       	ldd	r23, Y+36	; 0x24
    28de:	8d a1       	ldd	r24, Y+37	; 0x25
    28e0:	9e a1       	ldd	r25, Y+38	; 0x26
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <LCD_displayCharacter+0x5f2>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9a a3       	std	Y+34, r25	; 0x22
    28f8:	89 a3       	std	Y+33, r24	; 0x21
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <LCD_displayCharacter+0x670>
	else if (__tmp > 65535)
    28fc:	6b a1       	ldd	r22, Y+35	; 0x23
    28fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2900:	8d a1       	ldd	r24, Y+37	; 0x25
    2902:	9e a1       	ldd	r25, Y+38	; 0x26
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <LCD_displayCharacter+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	6f a1       	ldd	r22, Y+39	; 0x27
    2916:	78 a5       	ldd	r23, Y+40	; 0x28
    2918:	89 a5       	ldd	r24, Y+41	; 0x29
    291a:	9a a5       	ldd	r25, Y+42	; 0x2a
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9a a3       	std	Y+34, r25	; 0x22
    293a:	89 a3       	std	Y+33, r24	; 0x21
    293c:	0f c0       	rjmp	.+30     	; 0x295c <LCD_displayCharacter+0x652>
    293e:	80 e9       	ldi	r24, 0x90	; 144
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	98 a3       	std	Y+32, r25	; 0x20
    2944:	8f 8f       	std	Y+31, r24	; 0x1f
    2946:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2948:	98 a1       	ldd	r25, Y+32	; 0x20
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_displayCharacter+0x640>
    294e:	98 a3       	std	Y+32, r25	; 0x20
    2950:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	89 a1       	ldd	r24, Y+33	; 0x21
    2954:	9a a1       	ldd	r25, Y+34	; 0x22
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9a a3       	std	Y+34, r25	; 0x22
    295a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	89 a1       	ldd	r24, Y+33	; 0x21
    295e:	9a a1       	ldd	r25, Y+34	; 0x22
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <LCD_displayCharacter+0x634>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <LCD_displayCharacter+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6b a1       	ldd	r22, Y+35	; 0x23
    2968:	7c a1       	ldd	r23, Y+36	; 0x24
    296a:	8d a1       	ldd	r24, Y+37	; 0x25
    296c:	9e a1       	ldd	r25, Y+38	; 0x26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9a a3       	std	Y+34, r25	; 0x22
    2978:	89 a3       	std	Y+33, r24	; 0x21
    297a:	89 a1       	ldd	r24, Y+33	; 0x21
    297c:	9a a1       	ldd	r25, Y+34	; 0x22
    297e:	9e 8f       	std	Y+30, r25	; 0x1e
    2980:	8d 8f       	std	Y+29, r24	; 0x1d
    2982:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2984:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <LCD_displayCharacter+0x67c>
    298a:	9e 8f       	std	Y+30, r25	; 0x1e
    298c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_readPort(LCD_DATA_PORT_ID, &LCD_dataPortReadBuffer);
    298e:	9e 01       	movw	r18, r28
    2990:	2c 59       	subi	r18, 0x9C	; 156
    2992:	3f 4f       	sbci	r19, 0xFF	; 255
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	b9 01       	movw	r22, r18
    2998:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_readPort>
	LCD_value = (LCD_dataPortReadBuffer&0xE8) | (data & 0x07) | ((data & 0x08)<<1);
    299c:	fe 01       	movw	r30, r28
    299e:	ec 59       	subi	r30, 0x9C	; 156
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 81       	ld	r24, Z
    29a4:	98 2f       	mov	r25, r24
    29a6:	98 7e       	andi	r25, 0xE8	; 232
    29a8:	fe 01       	movw	r30, r28
    29aa:	e7 59       	subi	r30, 0x97	; 151
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	87 70       	andi	r24, 0x07	; 7
    29b2:	29 2f       	mov	r18, r25
    29b4:	28 2b       	or	r18, r24
    29b6:	fe 01       	movw	r30, r28
    29b8:	e7 59       	subi	r30, 0x97	; 151
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	88 70       	andi	r24, 0x08	; 8
    29c4:	90 70       	andi	r25, 0x00	; 0
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	82 2b       	or	r24, r18
    29cc:	fe 01       	movw	r30, r28
    29ce:	ed 59       	subi	r30, 0x9D	; 157
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 83       	st	Z, r24

	DIO_writePort(LCD_DATA_PORT_ID, LCD_value);
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 59       	subi	r30, 0x9D	; 157
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	60 81       	ld	r22, Z
    29de:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_writePort>
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	a0 e8       	ldi	r26, 0x80	; 128
    29e8:	bf e3       	ldi	r27, 0x3F	; 63
    29ea:	89 8f       	std	Y+25, r24	; 0x19
    29ec:	9a 8f       	std	Y+26, r25	; 0x1a
    29ee:	ab 8f       	std	Y+27, r26	; 0x1b
    29f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f2:	69 8d       	ldd	r22, Y+25	; 0x19
    29f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	4a e7       	ldi	r20, 0x7A	; 122
    2a00:	55 e4       	ldi	r21, 0x45	; 69
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	8d 8b       	std	Y+21, r24	; 0x15
    2a0c:	9e 8b       	std	Y+22, r25	; 0x16
    2a0e:	af 8b       	std	Y+23, r26	; 0x17
    2a10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a12:	6d 89       	ldd	r22, Y+21	; 0x15
    2a14:	7e 89       	ldd	r23, Y+22	; 0x16
    2a16:	8f 89       	ldd	r24, Y+23	; 0x17
    2a18:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e8       	ldi	r20, 0x80	; 128
    2a20:	5f e3       	ldi	r21, 0x3F	; 63
    2a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a26:	88 23       	and	r24, r24
    2a28:	2c f4       	brge	.+10     	; 0x2a34 <LCD_displayCharacter+0x72a>
		__ticks = 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9c 8b       	std	Y+20, r25	; 0x14
    2a30:	8b 8b       	std	Y+19, r24	; 0x13
    2a32:	3f c0       	rjmp	.+126    	; 0x2ab2 <LCD_displayCharacter+0x7a8>
	else if (__tmp > 65535)
    2a34:	6d 89       	ldd	r22, Y+21	; 0x15
    2a36:	7e 89       	ldd	r23, Y+22	; 0x16
    2a38:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	3f ef       	ldi	r19, 0xFF	; 255
    2a40:	4f e7       	ldi	r20, 0x7F	; 127
    2a42:	57 e4       	ldi	r21, 0x47	; 71
    2a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a48:	18 16       	cp	r1, r24
    2a4a:	4c f5       	brge	.+82     	; 0x2a9e <LCD_displayCharacter+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	51 e4       	ldi	r21, 0x41	; 65
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	9c 8b       	std	Y+20, r25	; 0x14
    2a72:	8b 8b       	std	Y+19, r24	; 0x13
    2a74:	0f c0       	rjmp	.+30     	; 0x2a94 <LCD_displayCharacter+0x78a>
    2a76:	80 e9       	ldi	r24, 0x90	; 144
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	9a 8b       	std	Y+18, r25	; 0x12
    2a7c:	89 8b       	std	Y+17, r24	; 0x11
    2a7e:	89 89       	ldd	r24, Y+17	; 0x11
    2a80:	9a 89       	ldd	r25, Y+18	; 0x12
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_displayCharacter+0x778>
    2a86:	9a 8b       	std	Y+18, r25	; 0x12
    2a88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	9c 8b       	std	Y+20, r25	; 0x14
    2a92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a94:	8b 89       	ldd	r24, Y+19	; 0x13
    2a96:	9c 89       	ldd	r25, Y+20	; 0x14
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	69 f7       	brne	.-38     	; 0x2a76 <LCD_displayCharacter+0x76c>
    2a9c:	14 c0       	rjmp	.+40     	; 0x2ac6 <LCD_displayCharacter+0x7bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
    2ab0:	8b 8b       	std	Y+19, r24	; 0x13
    2ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab6:	98 8b       	std	Y+16, r25	; 0x10
    2ab8:	8f 87       	std	Y+15, r24	; 0x0f
    2aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2abc:	98 89       	ldd	r25, Y+16	; 0x10
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <LCD_displayCharacter+0x7b4>
    2ac2:	98 8b       	std	Y+16, r25	; 0x10
    2ac4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_writePin(&EN, LOGIC_LOW);
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	89 59       	subi	r24, 0x99	; 153
    2aca:	9f 4f       	sbci	r25, 0xFF	; 255
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	8b 87       	std	Y+11, r24	; 0x0b
    2adc:	9c 87       	std	Y+12, r25	; 0x0c
    2ade:	ad 87       	std	Y+13, r26	; 0x0d
    2ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	55 e4       	ldi	r21, 0x45	; 69
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8f 83       	std	Y+7, r24	; 0x07
    2afc:	98 87       	std	Y+8, r25	; 0x08
    2afe:	a9 87       	std	Y+9, r26	; 0x09
    2b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_displayCharacter+0x81a>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <LCD_displayCharacter+0x898>
	else if (__tmp > 65535)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <LCD_displayCharacter+0x884>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <LCD_displayCharacter+0x87a>
    2b66:	80 e9       	ldi	r24, 0x90	; 144
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_displayCharacter+0x868>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <LCD_displayCharacter+0x85c>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <LCD_displayCharacter+0x8ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_displayCharacter+0x8a4>
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return E_OK;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
}
    2bb8:	c7 59       	subi	r28, 0x97	; 151
    2bba:	df 4f       	sbci	r29, 0xFF	; 255
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <LCD_displayString>:
 * Function name: LCD_displayString
 * Arguments: uint8* s
 * Return: STATUS
 * Description: displaying a string on the LCD
 *****************************************************************/
STATUS LCD_displayString(uint8* s){
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <LCD_displayString+0x6>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <LCD_displayString+0x8>
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2be0:	1a 82       	std	Y+2, r1	; 0x02
    2be2:	19 82       	std	Y+1, r1	; 0x01
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_displayString+0x34>
	while(s[i] != '\0'){
		LCD_displayCharacter(s[i]);
    2be6:	29 81       	ldd	r18, Y+1	; 0x01
    2be8:	3a 81       	ldd	r19, Y+2	; 0x02
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	9c 81       	ldd	r25, Y+4	; 0x04
    2bee:	fc 01       	movw	r30, r24
    2bf0:	e2 0f       	add	r30, r18
    2bf2:	f3 1f       	adc	r31, r19
    2bf4:	80 81       	ld	r24, Z
    2bf6:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayCharacter>
		i++;
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	89 83       	std	Y+1, r24	; 0x01
 * Return: STATUS
 * Description: displaying a string on the LCD
 *****************************************************************/
STATUS LCD_displayString(uint8* s){
	int i=0;
	while(s[i] != '\0'){
    2c04:	29 81       	ldd	r18, Y+1	; 0x01
    2c06:	3a 81       	ldd	r19, Y+2	; 0x02
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	e2 0f       	add	r30, r18
    2c10:	f3 1f       	adc	r31, r19
    2c12:	80 81       	ld	r24, Z
    2c14:	88 23       	and	r24, r24
    2c16:	39 f7       	brne	.-50     	; 0x2be6 <LCD_displayString+0x16>
		LCD_displayCharacter(s[i]);
		i++;
	}
	return E_OK;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <LCD_clearScreen>:
 * Function name: LCD_clearScreen
 * Arguments: void
 * Return: STATUS
 * Description: clearing the LCD
 *****************************************************************/
STATUS LCD_clearScreen(){
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <LCD_sendCommand>
	return E_OK;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
}
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <LED_init>:
 * Function name: LED_init
 * Arguments: void
 * Return: void
 * Description: initializing all the led pins direction and value
 *****************************************************************/
void LED_init(){
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
	/* configurations for the led pins*/
	DIO_setupPinDirection(&RED_LED, PIN_OUTPUT);
    2c46:	89 e7       	ldi	r24, 0x79	; 121
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_setupPinDirection(&GREEN_LED, PIN_OUTPUT);
    2c50:	8b e7       	ldi	r24, 0x7B	; 123
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	61 e0       	ldi	r22, 0x01	; 1
    2c56:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_setupPinDirection(&YELLOW_LED, PIN_OUTPUT);
    2c5a:	8f e7       	ldi	r24, 0x7F	; 127
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	DIO_setupPinDirection(&BLUE_LED, PIN_OUTPUT);
    2c64:	8d e7       	ldi	r24, 0x7D	; 125
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setupPinDirection>
	/* turning off all the leds */
	DIO_writePin(&BLUE_LED, LOGIC_LOW);
    2c6e:	8d e7       	ldi	r24, 0x7D	; 125
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
	DIO_writePin(&GREEN_LED, LOGIC_LOW);
    2c78:	8b e7       	ldi	r24, 0x7B	; 123
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
	DIO_writePin(&YELLOW_LED, LOGIC_LOW);
    2c82:	8f e7       	ldi	r24, 0x7F	; 127
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
	DIO_writePin(&RED_LED, LOGIC_LOW);
    2c8c:	89 e7       	ldi	r24, 0x79	; 121
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>

}
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <LED_turnOnOff>:
 * Function name: LED_turnOnOff
 * Arguments: led , status
 * Return: void
 * Description: turning on or off the passed led
 *****************************************************************/
void LED_turnOnOff(uint8 led , uint8 status){
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <LED_turnOnOff+0x6>
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <LED_turnOnOff+0x8>
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	6a 83       	std	Y+2, r22	; 0x02
	/* switching over the leds to turn on or off the passed one*/
	switch(led){
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3c 83       	std	Y+4, r19	; 0x04
    2cb4:	2b 83       	std	Y+3, r18	; 0x03
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	a9 f0       	breq	.+42     	; 0x2cea <LED_turnOnOff+0x4e>
    2cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc4:	22 30       	cpi	r18, 0x02	; 2
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <LED_turnOnOff+0x38>
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	81 f1       	breq	.+96     	; 0x2d32 <LED_turnOnOff+0x96>
    2cd2:	52 c0       	rjmp	.+164    	; 0x2d78 <LED_turnOnOff+0xdc>
    2cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd8:	22 30       	cpi	r18, 0x02	; 2
    2cda:	31 05       	cpc	r19, r1
    2cdc:	c1 f0       	breq	.+48     	; 0x2d0e <LED_turnOnOff+0x72>
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	83 30       	cpi	r24, 0x03	; 3
    2ce4:	91 05       	cpc	r25, r1
    2ce6:	b9 f1       	breq	.+110    	; 0x2d56 <LED_turnOnOff+0xba>
    2ce8:	47 c0       	rjmp	.+142    	; 0x2d78 <LED_turnOnOff+0xdc>
/*if yellow:*/
	case yellow_led:
		/* if LED_ON is passed then turn the led on */
		if(LED_ON == status){
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	31 f4       	brne	.+12     	; 0x2cfc <LED_turnOnOff+0x60>
			DIO_writePin(&YELLOW_LED, LOGIC_HIGH);
    2cf0:	8f e7       	ldi	r24, 0x7F	; 127
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	61 e0       	ldi	r22, 0x01	; 1
    2cf6:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2cfa:	3e c0       	rjmp	.+124    	; 0x2d78 <LED_turnOnOff+0xdc>
		/* if LED_OFF is passed then turn the led off */
		} else if(LED_OFF == status){
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	88 23       	and	r24, r24
    2d00:	d9 f5       	brne	.+118    	; 0x2d78 <LED_turnOnOff+0xdc>
			DIO_writePin(&YELLOW_LED, LOGIC_LOW);
    2d02:	8f e7       	ldi	r24, 0x7F	; 127
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2d0c:	35 c0       	rjmp	.+106    	; 0x2d78 <LED_turnOnOff+0xdc>
		}
		break;
	case red_led:
		/* if LED_ON is passed then turn the led on */
		if(LED_ON == status){
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	31 f4       	brne	.+12     	; 0x2d20 <LED_turnOnOff+0x84>
			DIO_writePin(&RED_LED, LOGIC_HIGH);
    2d14:	89 e7       	ldi	r24, 0x79	; 121
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2d1e:	2c c0       	rjmp	.+88     	; 0x2d78 <LED_turnOnOff+0xdc>
		/* if LED_OFF is passed then turn the led off */
		} else if(LED_OFF == status){
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	88 23       	and	r24, r24
    2d24:	49 f5       	brne	.+82     	; 0x2d78 <LED_turnOnOff+0xdc>
			DIO_writePin(&RED_LED, LOGIC_LOW);
    2d26:	89 e7       	ldi	r24, 0x79	; 121
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2d30:	23 c0       	rjmp	.+70     	; 0x2d78 <LED_turnOnOff+0xdc>
		}
		break;
	case green_led:
		/* if LED_ON is passed then turn the led on */
		if(LED_ON == status){
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	81 30       	cpi	r24, 0x01	; 1
    2d36:	31 f4       	brne	.+12     	; 0x2d44 <LED_turnOnOff+0xa8>
			DIO_writePin(&GREEN_LED, LOGIC_HIGH);
    2d38:	8b e7       	ldi	r24, 0x7B	; 123
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	61 e0       	ldi	r22, 0x01	; 1
    2d3e:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2d42:	1a c0       	rjmp	.+52     	; 0x2d78 <LED_turnOnOff+0xdc>
		/* if LED_OFF is passed then turn the led off */
		} else if(LED_OFF == status){
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	88 23       	and	r24, r24
    2d48:	b9 f4       	brne	.+46     	; 0x2d78 <LED_turnOnOff+0xdc>
			DIO_writePin(&GREEN_LED, LOGIC_LOW);
    2d4a:	8b e7       	ldi	r24, 0x7B	; 123
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2d54:	11 c0       	rjmp	.+34     	; 0x2d78 <LED_turnOnOff+0xdc>
		}
		break;
	case blue_led:
		/* if LED_ON is passed then turn the led on */
		if(LED_ON == status){
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	31 f4       	brne	.+12     	; 0x2d68 <LED_turnOnOff+0xcc>
			DIO_writePin(&BLUE_LED, LOGIC_HIGH);
    2d5c:	8d e7       	ldi	r24, 0x7D	; 125
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	61 e0       	ldi	r22, 0x01	; 1
    2d62:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2d66:	08 c0       	rjmp	.+16     	; 0x2d78 <LED_turnOnOff+0xdc>
		/* if LED_OFF is passed then turn the led off */
		} else if(LED_OFF == status){
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	88 23       	and	r24, r24
    2d6c:	29 f4       	brne	.+10     	; 0x2d78 <LED_turnOnOff+0xdc>
			DIO_writePin(&BLUE_LED, LOGIC_LOW);
    2d6e:	8d e7       	ldi	r24, 0x7D	; 125
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
		}
		break;
	}
}
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <LED_yellowBlink>:
 * Function name: LED_yellowBlink
 * Arguments: number of seconds
 * Return: void
 * Description: blinking the yellow led for the passed number of secs
 *********************************************************************/
void LED_yellowBlink(uint8 numOfSeconds){
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	6e 97       	sbiw	r28, 0x1e	; 30
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	8e 8f       	std	Y+30, r24	; 0x1e
	for(uint8 i=0 ; i<numOfSeconds ; i++){
    2d9c:	1d 8e       	std	Y+29, r1	; 0x1d
    2d9e:	f1 c0       	rjmp	.+482    	; 0x2f82 <LED_yellowBlink+0x1fc>
		DIO_writePin(&YELLOW_LED, LOGIC_HIGH);
    2da0:	8f e7       	ldi	r24, 0x7F	; 127
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	aa ef       	ldi	r26, 0xFA	; 250
    2db0:	b3 e4       	ldi	r27, 0x43	; 67
    2db2:	89 8f       	std	Y+25, r24	; 0x19
    2db4:	9a 8f       	std	Y+26, r25	; 0x1a
    2db6:	ab 8f       	std	Y+27, r26	; 0x1b
    2db8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dba:	69 8d       	ldd	r22, Y+25	; 0x19
    2dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a e7       	ldi	r20, 0x7A	; 122
    2dc8:	55 e4       	ldi	r21, 0x45	; 69
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8d 8b       	std	Y+21, r24	; 0x15
    2dd4:	9e 8b       	std	Y+22, r25	; 0x16
    2dd6:	af 8b       	std	Y+23, r26	; 0x17
    2dd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dda:	6d 89       	ldd	r22, Y+21	; 0x15
    2ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dde:	8f 89       	ldd	r24, Y+23	; 0x17
    2de0:	98 8d       	ldd	r25, Y+24	; 0x18
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e8       	ldi	r20, 0x80	; 128
    2de8:	5f e3       	ldi	r21, 0x3F	; 63
    2dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dee:	88 23       	and	r24, r24
    2df0:	2c f4       	brge	.+10     	; 0x2dfc <LED_yellowBlink+0x76>
		__ticks = 1;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9c 8b       	std	Y+20, r25	; 0x14
    2df8:	8b 8b       	std	Y+19, r24	; 0x13
    2dfa:	3f c0       	rjmp	.+126    	; 0x2e7a <LED_yellowBlink+0xf4>
	else if (__tmp > 65535)
    2dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2e00:	8f 89       	ldd	r24, Y+23	; 0x17
    2e02:	98 8d       	ldd	r25, Y+24	; 0x18
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	3f ef       	ldi	r19, 0xFF	; 255
    2e08:	4f e7       	ldi	r20, 0x7F	; 127
    2e0a:	57 e4       	ldi	r21, 0x47	; 71
    2e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e10:	18 16       	cp	r1, r24
    2e12:	4c f5       	brge	.+82     	; 0x2e66 <LED_yellowBlink+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e14:	69 8d       	ldd	r22, Y+25	; 0x19
    2e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e2       	ldi	r20, 0x20	; 32
    2e22:	51 e4       	ldi	r21, 0x41	; 65
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	bc 01       	movw	r22, r24
    2e2e:	cd 01       	movw	r24, r26
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
    2e3c:	0f c0       	rjmp	.+30     	; 0x2e5c <LED_yellowBlink+0xd6>
    2e3e:	80 e9       	ldi	r24, 0x90	; 144
    2e40:	91 e0       	ldi	r25, 0x01	; 1
    2e42:	9a 8b       	std	Y+18, r25	; 0x12
    2e44:	89 8b       	std	Y+17, r24	; 0x11
    2e46:	89 89       	ldd	r24, Y+17	; 0x11
    2e48:	9a 89       	ldd	r25, Y+18	; 0x12
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <LED_yellowBlink+0xc4>
    2e4e:	9a 8b       	std	Y+18, r25	; 0x12
    2e50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e52:	8b 89       	ldd	r24, Y+19	; 0x13
    2e54:	9c 89       	ldd	r25, Y+20	; 0x14
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	69 f7       	brne	.-38     	; 0x2e3e <LED_yellowBlink+0xb8>
    2e64:	14 c0       	rjmp	.+40     	; 0x2e8e <LED_yellowBlink+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e66:	6d 89       	ldd	r22, Y+21	; 0x15
    2e68:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9c 8b       	std	Y+20, r25	; 0x14
    2e78:	8b 8b       	std	Y+19, r24	; 0x13
    2e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7e:	98 8b       	std	Y+16, r25	; 0x10
    2e80:	8f 87       	std	Y+15, r24	; 0x0f
    2e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e84:	98 89       	ldd	r25, Y+16	; 0x10
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <LED_yellowBlink+0x100>
    2e8a:	98 8b       	std	Y+16, r25	; 0x10
    2e8c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		DIO_writePin(&YELLOW_LED, LOGIC_LOW);
    2e8e:	8f e7       	ldi	r24, 0x7F	; 127
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	aa ef       	ldi	r26, 0xFA	; 250
    2e9e:	b3 e4       	ldi	r27, 0x43	; 67
    2ea0:	8b 87       	std	Y+11, r24	; 0x0b
    2ea2:	9c 87       	std	Y+12, r25	; 0x0c
    2ea4:	ad 87       	std	Y+13, r26	; 0x0d
    2ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	4a e7       	ldi	r20, 0x7A	; 122
    2eb6:	55 e4       	ldi	r21, 0x45	; 69
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8f 83       	std	Y+7, r24	; 0x07
    2ec2:	98 87       	std	Y+8, r25	; 0x08
    2ec4:	a9 87       	std	Y+9, r26	; 0x09
    2ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	5f e3       	ldi	r21, 0x3F	; 63
    2ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2edc:	88 23       	and	r24, r24
    2ede:	2c f4       	brge	.+10     	; 0x2eea <LED_yellowBlink+0x164>
		__ticks = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	3f c0       	rjmp	.+126    	; 0x2f68 <LED_yellowBlink+0x1e2>
	else if (__tmp > 65535)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	3f ef       	ldi	r19, 0xFF	; 255
    2ef6:	4f e7       	ldi	r20, 0x7F	; 127
    2ef8:	57 e4       	ldi	r21, 0x47	; 71
    2efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2efe:	18 16       	cp	r1, r24
    2f00:	4c f5       	brge	.+82     	; 0x2f54 <LED_yellowBlink+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e2       	ldi	r20, 0x20	; 32
    2f10:	51 e4       	ldi	r21, 0x41	; 65
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <LED_yellowBlink+0x1c4>
    2f2c:	80 e9       	ldi	r24, 0x90	; 144
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	8b 83       	std	Y+3, r24	; 0x03
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <LED_yellowBlink+0x1b2>
    2f3c:	9c 83       	std	Y+4, r25	; 0x04
    2f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	69 f7       	brne	.-38     	; 0x2f2c <LED_yellowBlink+0x1a6>
    2f52:	14 c0       	rjmp	.+40     	; 0x2f7c <LED_yellowBlink+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	9a 81       	ldd	r25, Y+2	; 0x02
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <LED_yellowBlink+0x1ee>
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
 * Arguments: number of seconds
 * Return: void
 * Description: blinking the yellow led for the passed number of secs
 *********************************************************************/
void LED_yellowBlink(uint8 numOfSeconds){
	for(uint8 i=0 ; i<numOfSeconds ; i++){
    2f7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f7e:	8f 5f       	subi	r24, 0xFF	; 255
    2f80:	8d 8f       	std	Y+29, r24	; 0x1d
    2f82:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f86:	98 17       	cp	r25, r24
    2f88:	08 f4       	brcc	.+2      	; 0x2f8c <LED_yellowBlink+0x206>
    2f8a:	0a cf       	rjmp	.-492    	; 0x2da0 <LED_yellowBlink+0x1a>
		DIO_writePin(&YELLOW_LED, LOGIC_HIGH);
		_delay_ms(500);
		DIO_writePin(&YELLOW_LED, LOGIC_LOW);
		_delay_ms(500);
	}
}
    2f8c:	6e 96       	adiw	r28, 0x1e	; 30
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <LED_allOff>:
 * Function name: LED_allOff
 * Arguments: void
 * Return: void
 * Description: turning off all the leds
 *****************************************************************/
void LED_allOff(){
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(&YELLOW_LED, LOGIC_LOW);
    2fa6:	8f e7       	ldi	r24, 0x7F	; 127
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
	DIO_writePin(&RED_LED, LOGIC_LOW);
    2fb0:	89 e7       	ldi	r24, 0x79	; 121
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
	DIO_writePin(&GREEN_LED, LOGIC_LOW);
    2fba:	8b e7       	ldi	r24, 0x7B	; 123
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>
	DIO_writePin(&BLUE_LED, LOGIC_LOW);
    2fc4:	8d e7       	ldi	r24, 0x7D	; 125
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_writePin>

}
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <__vector_2>:
/* flag to detect whether it's outside or inside the interrupt */
uint8 g_pedestrian_f = OUTSIDE_INTERRUPT;
uint8 g_was_in_the_interrupt = STD_OFF;

/* external interrupt one */
ISR( INT1_vect ){
    2fd4:	1f 92       	push	r1
    2fd6:	0f 92       	push	r0
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	0f 92       	push	r0
    2fdc:	11 24       	eor	r1, r1
    2fde:	2f 93       	push	r18
    2fe0:	3f 93       	push	r19
    2fe2:	4f 93       	push	r20
    2fe4:	5f 93       	push	r21
    2fe6:	6f 93       	push	r22
    2fe8:	7f 93       	push	r23
    2fea:	8f 93       	push	r24
    2fec:	9f 93       	push	r25
    2fee:	af 93       	push	r26
    2ff0:	bf 93       	push	r27
    2ff2:	ef 93       	push	r30
    2ff4:	ff 93       	push	r31
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
	/* call the predestrain mode */
	PEDESTRAIN_mode();
    2ffe:	0e 94 90 19 	call	0x3320	; 0x3320 <PEDESTRAIN_mode>
	/* rise the flag that indicates that I entered the ISR */
	g_was_in_the_interrupt = STD_ON;
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	80 93 87 00 	sts	0x0087, r24
}
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	ff 91       	pop	r31
    300e:	ef 91       	pop	r30
    3010:	bf 91       	pop	r27
    3012:	af 91       	pop	r26
    3014:	9f 91       	pop	r25
    3016:	8f 91       	pop	r24
    3018:	7f 91       	pop	r23
    301a:	6f 91       	pop	r22
    301c:	5f 91       	pop	r21
    301e:	4f 91       	pop	r20
    3020:	3f 91       	pop	r19
    3022:	2f 91       	pop	r18
    3024:	0f 90       	pop	r0
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	0f 90       	pop	r0
    302a:	1f 90       	pop	r1
    302c:	18 95       	reti

0000302e <main>:


int main(){
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
	TRAFFICLIGHT_init(); /*initializing the modules */
    3036:	0e 94 20 18 	call	0x3040	; 0x3040 <TRAFFICLIGHT_init>
	while(1){
		CARS_mode(); /* executing the CAR mode */
    303a:	0e 94 2d 18 	call	0x305a	; 0x305a <CARS_mode>
    303e:	fd cf       	rjmp	.-6      	; 0x303a <main+0xc>

00003040 <TRAFFICLIGHT_init>:
 * Function name: TRAFFICLIGHT_init
 * Arguments: void
 * Return: void
 * Description: initializing all the peripherals that are used
 ****************************************************************/
void TRAFFICLIGHT_init(){
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
	LCD_init(); /* initializing the LCD */
    3048:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_init>
	LED_init(); /* initializing the LEDs */
    304c:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <LED_init>
	BUTTON_init(); /* initializing the buttons */
    3050:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <BUTTON_init>
}
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <CARS_mode>:
 * Function name: CARS_mode
 * Arguments: void
 * Return: void
 * Description: executing the requirements of the CARs mode
 ****************************************************************/
void CARS_mode(){
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	6e 97       	sbiw	r28, 0x1e	; 30
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
	/* clearing the LCD and displaying "CAR" on the LCD */
	LCD_clearScreen();
    306e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	LCD_displayString("CAR");
    3072:	80 e6       	ldi	r24, 0x60	; 96
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_displayString>

/*first: */
	/* turning on the green led for five seconds */
	LED_turnOnOff(green_led, LED_ON);
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	61 e0       	ldi	r22, 0x01	; 1
    307e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
	green_flag = STD_ON;
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	80 93 84 00 	sts	0x0084, r24
	for(uint8 i=0 ; i<MAX_ITERATIONS_FOR_100ms_DELAY ; i++){
    3088:	1e 8e       	std	Y+30, r1	; 0x1e
    308a:	7c c0       	rjmp	.+248    	; 0x3184 <CARS_mode+0x12a>
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a8 ec       	ldi	r26, 0xC8	; 200
    3092:	b2 e4       	ldi	r27, 0x42	; 66
    3094:	89 8f       	std	Y+25, r24	; 0x19
    3096:	9a 8f       	std	Y+26, r25	; 0x1a
    3098:	ab 8f       	std	Y+27, r26	; 0x1b
    309a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309c:	69 8d       	ldd	r22, Y+25	; 0x19
    309e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a e7       	ldi	r20, 0x7A	; 122
    30aa:	55 e4       	ldi	r21, 0x45	; 69
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8d 8b       	std	Y+21, r24	; 0x15
    30b6:	9e 8b       	std	Y+22, r25	; 0x16
    30b8:	af 8b       	std	Y+23, r26	; 0x17
    30ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30bc:	6d 89       	ldd	r22, Y+21	; 0x15
    30be:	7e 89       	ldd	r23, Y+22	; 0x16
    30c0:	8f 89       	ldd	r24, Y+23	; 0x17
    30c2:	98 8d       	ldd	r25, Y+24	; 0x18
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e8       	ldi	r20, 0x80	; 128
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d0:	88 23       	and	r24, r24
    30d2:	2c f4       	brge	.+10     	; 0x30de <CARS_mode+0x84>
		__ticks = 1;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9c 8b       	std	Y+20, r25	; 0x14
    30da:	8b 8b       	std	Y+19, r24	; 0x13
    30dc:	3f c0       	rjmp	.+126    	; 0x315c <CARS_mode+0x102>
	else if (__tmp > 65535)
    30de:	6d 89       	ldd	r22, Y+21	; 0x15
    30e0:	7e 89       	ldd	r23, Y+22	; 0x16
    30e2:	8f 89       	ldd	r24, Y+23	; 0x17
    30e4:	98 8d       	ldd	r25, Y+24	; 0x18
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	3f ef       	ldi	r19, 0xFF	; 255
    30ea:	4f e7       	ldi	r20, 0x7F	; 127
    30ec:	57 e4       	ldi	r21, 0x47	; 71
    30ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f2:	18 16       	cp	r1, r24
    30f4:	4c f5       	brge	.+82     	; 0x3148 <CARS_mode+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f6:	69 8d       	ldd	r22, Y+25	; 0x19
    30f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e2       	ldi	r20, 0x20	; 32
    3104:	51 e4       	ldi	r21, 0x41	; 65
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9c 8b       	std	Y+20, r25	; 0x14
    311c:	8b 8b       	std	Y+19, r24	; 0x13
    311e:	0f c0       	rjmp	.+30     	; 0x313e <CARS_mode+0xe4>
    3120:	80 e9       	ldi	r24, 0x90	; 144
    3122:	91 e0       	ldi	r25, 0x01	; 1
    3124:	9a 8b       	std	Y+18, r25	; 0x12
    3126:	89 8b       	std	Y+17, r24	; 0x11
    3128:	89 89       	ldd	r24, Y+17	; 0x11
    312a:	9a 89       	ldd	r25, Y+18	; 0x12
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <CARS_mode+0xd2>
    3130:	9a 8b       	std	Y+18, r25	; 0x12
    3132:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	9c 8b       	std	Y+20, r25	; 0x14
    313c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313e:	8b 89       	ldd	r24, Y+19	; 0x13
    3140:	9c 89       	ldd	r25, Y+20	; 0x14
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	69 f7       	brne	.-38     	; 0x3120 <CARS_mode+0xc6>
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <CARS_mode+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3148:	6d 89       	ldd	r22, Y+21	; 0x15
    314a:	7e 89       	ldd	r23, Y+22	; 0x16
    314c:	8f 89       	ldd	r24, Y+23	; 0x17
    314e:	98 8d       	ldd	r25, Y+24	; 0x18
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9c 8b       	std	Y+20, r25	; 0x14
    315a:	8b 8b       	std	Y+19, r24	; 0x13
    315c:	8b 89       	ldd	r24, Y+19	; 0x13
    315e:	9c 89       	ldd	r25, Y+20	; 0x14
    3160:	98 8b       	std	Y+16, r25	; 0x10
    3162:	8f 87       	std	Y+15, r24	; 0x0f
    3164:	8f 85       	ldd	r24, Y+15	; 0x0f
    3166:	98 89       	ldd	r25, Y+16	; 0x10
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <CARS_mode+0x10e>
    316c:	98 8b       	std	Y+16, r25	; 0x10
    316e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		if(g_was_in_the_interrupt){
    3170:	80 91 87 00 	lds	r24, 0x0087
    3174:	88 23       	and	r24, r24
    3176:	19 f0       	breq	.+6      	; 0x317e <CARS_mode+0x124>
			g_was_in_the_interrupt = STD_OFF;
    3178:	10 92 87 00 	sts	0x0087, r1
    317c:	b9 c0       	rjmp	.+370    	; 0x32f0 <CARS_mode+0x296>

/*first: */
	/* turning on the green led for five seconds */
	LED_turnOnOff(green_led, LED_ON);
	green_flag = STD_ON;
	for(uint8 i=0 ; i<MAX_ITERATIONS_FOR_100ms_DELAY ; i++){
    317e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3180:	8f 5f       	subi	r24, 0xFF	; 255
    3182:	8e 8f       	std	Y+30, r24	; 0x1e
    3184:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3186:	82 33       	cpi	r24, 0x32	; 50
    3188:	08 f4       	brcc	.+2      	; 0x318c <CARS_mode+0x132>
    318a:	80 cf       	rjmp	.-256    	; 0x308c <CARS_mode+0x32>
		if(g_was_in_the_interrupt){
			g_was_in_the_interrupt = STD_OFF;
			return;
		}
	}
	LED_turnOnOff(green_led, LED_OFF);
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
	green_flag = STD_OFF;
    3194:	10 92 84 00 	sts	0x0084, r1

/*Second: */
	/* turning on the yellow led for five seconds */
	yellow_flag = STD_ON;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	80 93 83 00 	sts	0x0083, r24
	LED_yellowBlink(NUM_OF_SEC);
    319e:	85 e0       	ldi	r24, 0x05	; 5
    31a0:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <LED_yellowBlink>
	yellow_flag = STD_OFF;
    31a4:	10 92 83 00 	sts	0x0083, r1
	if(g_was_in_the_interrupt){
    31a8:	80 91 87 00 	lds	r24, 0x0087
    31ac:	88 23       	and	r24, r24
    31ae:	19 f0       	breq	.+6      	; 0x31b6 <CARS_mode+0x15c>
		g_was_in_the_interrupt = STD_OFF;
    31b0:	10 92 87 00 	sts	0x0087, r1
    31b4:	9d c0       	rjmp	.+314    	; 0x32f0 <CARS_mode+0x296>
		return;
	}

/*Third: */
	/* turning on the red led for five seconds */
	LED_turnOnOff(red_led, LED_ON);
    31b6:	82 e0       	ldi	r24, 0x02	; 2
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
	red_flag = STD_ON;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	80 93 82 00 	sts	0x0082, r24
	for(uint8 i=0 ; i<MAX_ITERATIONS_FOR_100ms_DELAY ; i++){
    31c4:	1d 8e       	std	Y+29, r1	; 0x1d
    31c6:	7c c0       	rjmp	.+248    	; 0x32c0 <CARS_mode+0x266>
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	a8 ec       	ldi	r26, 0xC8	; 200
    31ce:	b2 e4       	ldi	r27, 0x42	; 66
    31d0:	8b 87       	std	Y+11, r24	; 0x0b
    31d2:	9c 87       	std	Y+12, r25	; 0x0c
    31d4:	ad 87       	std	Y+13, r26	; 0x0d
    31d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31da:	7c 85       	ldd	r23, Y+12	; 0x0c
    31dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31de:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a e7       	ldi	r20, 0x7A	; 122
    31e6:	55 e4       	ldi	r21, 0x45	; 69
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	8f 83       	std	Y+7, r24	; 0x07
    31f2:	98 87       	std	Y+8, r25	; 0x08
    31f4:	a9 87       	std	Y+9, r26	; 0x09
    31f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e8       	ldi	r20, 0x80	; 128
    3206:	5f e3       	ldi	r21, 0x3F	; 63
    3208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320c:	88 23       	and	r24, r24
    320e:	2c f4       	brge	.+10     	; 0x321a <CARS_mode+0x1c0>
		__ticks = 1;
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9e 83       	std	Y+6, r25	; 0x06
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	3f c0       	rjmp	.+126    	; 0x3298 <CARS_mode+0x23e>
	else if (__tmp > 65535)
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	3f ef       	ldi	r19, 0xFF	; 255
    3226:	4f e7       	ldi	r20, 0x7F	; 127
    3228:	57 e4       	ldi	r21, 0x47	; 71
    322a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322e:	18 16       	cp	r1, r24
    3230:	4c f5       	brge	.+82     	; 0x3284 <CARS_mode+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3232:	6b 85       	ldd	r22, Y+11	; 0x0b
    3234:	7c 85       	ldd	r23, Y+12	; 0x0c
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	9e 85       	ldd	r25, Y+14	; 0x0e
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e2       	ldi	r20, 0x20	; 32
    3240:	51 e4       	ldi	r21, 0x41	; 65
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	0f c0       	rjmp	.+30     	; 0x327a <CARS_mode+0x220>
    325c:	80 e9       	ldi	r24, 0x90	; 144
    325e:	91 e0       	ldi	r25, 0x01	; 1
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <CARS_mode+0x20e>
    326c:	9c 83       	std	Y+4, r25	; 0x04
    326e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327a:	8d 81       	ldd	r24, Y+5	; 0x05
    327c:	9e 81       	ldd	r25, Y+6	; 0x06
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	69 f7       	brne	.-38     	; 0x325c <CARS_mode+0x202>
    3282:	14 c0       	rjmp	.+40     	; 0x32ac <CARS_mode+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3284:	6f 81       	ldd	r22, Y+7	; 0x07
    3286:	78 85       	ldd	r23, Y+8	; 0x08
    3288:	89 85       	ldd	r24, Y+9	; 0x09
    328a:	9a 85       	ldd	r25, Y+10	; 0x0a
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9e 83       	std	Y+6, r25	; 0x06
    3296:	8d 83       	std	Y+5, r24	; 0x05
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <CARS_mode+0x24a>
    32a8:	9a 83       	std	Y+2, r25	; 0x02
    32aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		if(g_was_in_the_interrupt){
    32ac:	80 91 87 00 	lds	r24, 0x0087
    32b0:	88 23       	and	r24, r24
    32b2:	19 f0       	breq	.+6      	; 0x32ba <CARS_mode+0x260>
			g_was_in_the_interrupt = STD_OFF;
    32b4:	10 92 87 00 	sts	0x0087, r1
    32b8:	1b c0       	rjmp	.+54     	; 0x32f0 <CARS_mode+0x296>

/*Third: */
	/* turning on the red led for five seconds */
	LED_turnOnOff(red_led, LED_ON);
	red_flag = STD_ON;
	for(uint8 i=0 ; i<MAX_ITERATIONS_FOR_100ms_DELAY ; i++){
    32ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32bc:	8f 5f       	subi	r24, 0xFF	; 255
    32be:	8d 8f       	std	Y+29, r24	; 0x1d
    32c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32c2:	82 33       	cpi	r24, 0x32	; 50
    32c4:	08 f4       	brcc	.+2      	; 0x32c8 <CARS_mode+0x26e>
    32c6:	80 cf       	rjmp	.-256    	; 0x31c8 <CARS_mode+0x16e>
		if(g_was_in_the_interrupt){
			g_was_in_the_interrupt = STD_OFF;
			return;
		}
	}
	LED_turnOnOff(red_led, LED_OFF);
    32c8:	82 e0       	ldi	r24, 0x02	; 2
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
	red_flag = STD_OFF;
    32d0:	10 92 82 00 	sts	0x0082, r1

/*Four: */
	/* turning on the green led for five seconds*/
	yellow_flag = STD_ON;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	80 93 83 00 	sts	0x0083, r24
	LED_yellowBlink(NUM_OF_SEC);
    32da:	85 e0       	ldi	r24, 0x05	; 5
    32dc:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <LED_yellowBlink>
	yellow_flag = STD_OFF;
    32e0:	10 92 83 00 	sts	0x0083, r1
	if(g_was_in_the_interrupt){
    32e4:	80 91 87 00 	lds	r24, 0x0087
    32e8:	88 23       	and	r24, r24
    32ea:	11 f0       	breq	.+4      	; 0x32f0 <CARS_mode+0x296>
		g_was_in_the_interrupt = STD_OFF;
    32ec:	10 92 87 00 	sts	0x0087, r1
		return;
	}
}
    32f0:	6e 96       	adiw	r28, 0x1e	; 30
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	08 95       	ret

00003302 <clear_flags>:
 * Function name: clear_flags
 * Arguments: void
 * Return: void
 * Description: clearing all the flags.
 ****************************************************************/
void clear_flags(){
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
	red_flag = STD_OFF;
    330a:	10 92 82 00 	sts	0x0082, r1
	yellow_flag = STD_OFF;
    330e:	10 92 83 00 	sts	0x0083, r1
	green_flag = STD_OFF;
    3312:	10 92 84 00 	sts	0x0084, r1
	blue_flag = STD_OFF;
    3316:	10 92 85 00 	sts	0x0085, r1
}
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <PEDESTRAIN_mode>:
 * Function name: PEDESTRAIN_mode
 * Arguments: void
 * Return: void
 * Description: executing the requirements of the pedestrain mode
 ****************************************************************/
void PEDESTRAIN_mode(){
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	aa 97       	sbiw	r28, 0x2a	; 42
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	de bf       	out	0x3e, r29	; 62
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	cd bf       	out	0x3d, r28	; 61
	if(g_pedestrian_f == OUTSIDE_INTERRUPT){
    3334:	80 91 86 00 	lds	r24, 0x0086
    3338:	88 23       	and	r24, r24
    333a:	09 f0       	breq	.+2      	; 0x333e <PEDESTRAIN_mode+0x1e>
    333c:	d9 c1       	rjmp	.+946    	; 0x36f0 <PEDESTRAIN_mode+0x3d0>
		g_pedestrian_f = INSIDE_INTERRUPT;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	80 93 86 00 	sts	0x0086, r24
		/* if the red led is on */
		if(STD_ON == red_flag){
    3344:	80 91 82 00 	lds	r24, 0x0082
    3348:	81 30       	cpi	r24, 0x01	; 1
    334a:	09 f0       	breq	.+2      	; 0x334e <PEDESTRAIN_mode+0x2e>
    334c:	94 c0       	rjmp	.+296    	; 0x3476 <PEDESTRAIN_mode+0x156>
			/* turning on the blue led and red led */
			LED_turnOnOff(blue_led, LED_ON);
    334e:	83 e0       	ldi	r24, 0x03	; 3
    3350:	61 e0       	ldi	r22, 0x01	; 1
    3352:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			LED_turnOnOff(red_led, LED_ON);
    3356:	82 e0       	ldi	r24, 0x02	; 2
    3358:	61 e0       	ldi	r22, 0x01	; 1
    335a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			/* clearing the screen and displaying "pedestrain"*/
			LCD_clearScreen();
    335e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("pedestrain");
    3362:	84 e6       	ldi	r24, 0x64	; 100
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_displayString>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e4       	ldi	r25, 0x40	; 64
    336e:	ac e9       	ldi	r26, 0x9C	; 156
    3370:	b5 e4       	ldi	r27, 0x45	; 69
    3372:	8f a3       	std	Y+39, r24	; 0x27
    3374:	98 a7       	std	Y+40, r25	; 0x28
    3376:	a9 a7       	std	Y+41, r26	; 0x29
    3378:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337a:	6f a1       	ldd	r22, Y+39	; 0x27
    337c:	78 a5       	ldd	r23, Y+40	; 0x28
    337e:	89 a5       	ldd	r24, Y+41	; 0x29
    3380:	9a a5       	ldd	r25, Y+42	; 0x2a
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a e7       	ldi	r20, 0x7A	; 122
    3388:	55 e4       	ldi	r21, 0x45	; 69
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	8b a3       	std	Y+35, r24	; 0x23
    3394:	9c a3       	std	Y+36, r25	; 0x24
    3396:	ad a3       	std	Y+37, r26	; 0x25
    3398:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    339a:	6b a1       	ldd	r22, Y+35	; 0x23
    339c:	7c a1       	ldd	r23, Y+36	; 0x24
    339e:	8d a1       	ldd	r24, Y+37	; 0x25
    33a0:	9e a1       	ldd	r25, Y+38	; 0x26
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ae:	88 23       	and	r24, r24
    33b0:	2c f4       	brge	.+10     	; 0x33bc <PEDESTRAIN_mode+0x9c>
		__ticks = 1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9a a3       	std	Y+34, r25	; 0x22
    33b8:	89 a3       	std	Y+33, r24	; 0x21
    33ba:	3f c0       	rjmp	.+126    	; 0x343a <PEDESTRAIN_mode+0x11a>
	else if (__tmp > 65535)
    33bc:	6b a1       	ldd	r22, Y+35	; 0x23
    33be:	7c a1       	ldd	r23, Y+36	; 0x24
    33c0:	8d a1       	ldd	r24, Y+37	; 0x25
    33c2:	9e a1       	ldd	r25, Y+38	; 0x26
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	4c f5       	brge	.+82     	; 0x3426 <PEDESTRAIN_mode+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d4:	6f a1       	ldd	r22, Y+39	; 0x27
    33d6:	78 a5       	ldd	r23, Y+40	; 0x28
    33d8:	89 a5       	ldd	r24, Y+41	; 0x29
    33da:	9a a5       	ldd	r25, Y+42	; 0x2a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9a a3       	std	Y+34, r25	; 0x22
    33fa:	89 a3       	std	Y+33, r24	; 0x21
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <PEDESTRAIN_mode+0xfc>
    33fe:	80 e9       	ldi	r24, 0x90	; 144
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	98 a3       	std	Y+32, r25	; 0x20
    3404:	8f 8f       	std	Y+31, r24	; 0x1f
    3406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3408:	98 a1       	ldd	r25, Y+32	; 0x20
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <PEDESTRAIN_mode+0xea>
    340e:	98 a3       	std	Y+32, r25	; 0x20
    3410:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	89 a1       	ldd	r24, Y+33	; 0x21
    3414:	9a a1       	ldd	r25, Y+34	; 0x22
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9a a3       	std	Y+34, r25	; 0x22
    341a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341c:	89 a1       	ldd	r24, Y+33	; 0x21
    341e:	9a a1       	ldd	r25, Y+34	; 0x22
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	69 f7       	brne	.-38     	; 0x33fe <PEDESTRAIN_mode+0xde>
    3424:	14 c0       	rjmp	.+40     	; 0x344e <PEDESTRAIN_mode+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	6b a1       	ldd	r22, Y+35	; 0x23
    3428:	7c a1       	ldd	r23, Y+36	; 0x24
    342a:	8d a1       	ldd	r24, Y+37	; 0x25
    342c:	9e a1       	ldd	r25, Y+38	; 0x26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9a a3       	std	Y+34, r25	; 0x22
    3438:	89 a3       	std	Y+33, r24	; 0x21
    343a:	89 a1       	ldd	r24, Y+33	; 0x21
    343c:	9a a1       	ldd	r25, Y+34	; 0x22
    343e:	9e 8f       	std	Y+30, r25	; 0x1e
    3440:	8d 8f       	std	Y+29, r24	; 0x1d
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <PEDESTRAIN_mode+0x126>
    344a:	9e 8f       	std	Y+30, r25	; 0x1e
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5000);
			/* turning of the blue led and red led */
			LED_turnOnOff(blue_led, LED_OFF);
    344e:	83 e0       	ldi	r24, 0x03	; 3
    3450:	60 e0       	ldi	r22, 0x00	; 0
    3452:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			LED_turnOnOff(red_led, LED_OFF);
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			/* clearing the LCD and displaying "CAR" */
			LCD_clearScreen();
    345e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("CAR");
    3462:	80 e6       	ldi	r24, 0x60	; 96
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_displayString>
			/* blinking the yellow led */
			LED_yellowBlink(NUM_OF_SEC);
    346a:	85 e0       	ldi	r24, 0x05	; 5
    346c:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <LED_yellowBlink>
			/* clearing the flags */
			clear_flags();
    3470:	0e 94 81 19 	call	0x3302	; 0x3302 <clear_flags>
    3474:	3b c1       	rjmp	.+630    	; 0x36ec <PEDESTRAIN_mode+0x3cc>
		/* if the green led is on */
		} else if(STD_ON == green_flag){
    3476:	80 91 84 00 	lds	r24, 0x0084
    347a:	81 30       	cpi	r24, 0x01	; 1
    347c:	09 f0       	breq	.+2      	; 0x3480 <PEDESTRAIN_mode+0x160>
    347e:	9b c0       	rjmp	.+310    	; 0x35b6 <PEDESTRAIN_mode+0x296>
			/* turn off the green led */
			LED_turnOnOff(green_led, LED_OFF);
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	60 e0       	ldi	r22, 0x00	; 0
    3484:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			/* blink the yellow for 5 seconds */
			LED_yellowBlink(NUM_OF_SEC);
    3488:	85 e0       	ldi	r24, 0x05	; 5
    348a:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <LED_yellowBlink>
			/* turning on the blue and red leds */
			LED_turnOnOff(blue_led, LED_ON);
    348e:	83 e0       	ldi	r24, 0x03	; 3
    3490:	61 e0       	ldi	r22, 0x01	; 1
    3492:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			LED_turnOnOff(red_led, LED_ON);
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	61 e0       	ldi	r22, 0x01	; 1
    349a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			/* clearing the screen and displaying "pedestrain"*/
			LCD_clearScreen();
    349e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("pedestrain");
    34a2:	84 e6       	ldi	r24, 0x64	; 100
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_displayString>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e4       	ldi	r25, 0x40	; 64
    34ae:	ac e9       	ldi	r26, 0x9C	; 156
    34b0:	b5 e4       	ldi	r27, 0x45	; 69
    34b2:	89 8f       	std	Y+25, r24	; 0x19
    34b4:	9a 8f       	std	Y+26, r25	; 0x1a
    34b6:	ab 8f       	std	Y+27, r26	; 0x1b
    34b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	69 8d       	ldd	r22, Y+25	; 0x19
    34bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a e7       	ldi	r20, 0x7A	; 122
    34c8:	55 e4       	ldi	r21, 0x45	; 69
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8d 8b       	std	Y+21, r24	; 0x15
    34d4:	9e 8b       	std	Y+22, r25	; 0x16
    34d6:	af 8b       	std	Y+23, r26	; 0x17
    34d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34da:	6d 89       	ldd	r22, Y+21	; 0x15
    34dc:	7e 89       	ldd	r23, Y+22	; 0x16
    34de:	8f 89       	ldd	r24, Y+23	; 0x17
    34e0:	98 8d       	ldd	r25, Y+24	; 0x18
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	2c f4       	brge	.+10     	; 0x34fc <PEDESTRAIN_mode+0x1dc>
		__ticks = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9c 8b       	std	Y+20, r25	; 0x14
    34f8:	8b 8b       	std	Y+19, r24	; 0x13
    34fa:	3f c0       	rjmp	.+126    	; 0x357a <PEDESTRAIN_mode+0x25a>
	else if (__tmp > 65535)
    34fc:	6d 89       	ldd	r22, Y+21	; 0x15
    34fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3500:	8f 89       	ldd	r24, Y+23	; 0x17
    3502:	98 8d       	ldd	r25, Y+24	; 0x18
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	57 e4       	ldi	r21, 0x47	; 71
    350c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	4c f5       	brge	.+82     	; 0x3566 <PEDESTRAIN_mode+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	69 8d       	ldd	r22, Y+25	; 0x19
    3516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    351a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9c 8b       	std	Y+20, r25	; 0x14
    353a:	8b 8b       	std	Y+19, r24	; 0x13
    353c:	0f c0       	rjmp	.+30     	; 0x355c <PEDESTRAIN_mode+0x23c>
    353e:	80 e9       	ldi	r24, 0x90	; 144
    3540:	91 e0       	ldi	r25, 0x01	; 1
    3542:	9a 8b       	std	Y+18, r25	; 0x12
    3544:	89 8b       	std	Y+17, r24	; 0x11
    3546:	89 89       	ldd	r24, Y+17	; 0x11
    3548:	9a 89       	ldd	r25, Y+18	; 0x12
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <PEDESTRAIN_mode+0x22a>
    354e:	9a 8b       	std	Y+18, r25	; 0x12
    3550:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	8b 89       	ldd	r24, Y+19	; 0x13
    3554:	9c 89       	ldd	r25, Y+20	; 0x14
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	9c 8b       	std	Y+20, r25	; 0x14
    355a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	8b 89       	ldd	r24, Y+19	; 0x13
    355e:	9c 89       	ldd	r25, Y+20	; 0x14
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f7       	brne	.-38     	; 0x353e <PEDESTRAIN_mode+0x21e>
    3564:	14 c0       	rjmp	.+40     	; 0x358e <PEDESTRAIN_mode+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3566:	6d 89       	ldd	r22, Y+21	; 0x15
    3568:	7e 89       	ldd	r23, Y+22	; 0x16
    356a:	8f 89       	ldd	r24, Y+23	; 0x17
    356c:	98 8d       	ldd	r25, Y+24	; 0x18
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9c 8b       	std	Y+20, r25	; 0x14
    3578:	8b 8b       	std	Y+19, r24	; 0x13
    357a:	8b 89       	ldd	r24, Y+19	; 0x13
    357c:	9c 89       	ldd	r25, Y+20	; 0x14
    357e:	98 8b       	std	Y+16, r25	; 0x10
    3580:	8f 87       	std	Y+15, r24	; 0x0f
    3582:	8f 85       	ldd	r24, Y+15	; 0x0f
    3584:	98 89       	ldd	r25, Y+16	; 0x10
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <PEDESTRAIN_mode+0x266>
    358a:	98 8b       	std	Y+16, r25	; 0x10
    358c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5000);
			/* turning off the blue and red leds */
			LED_turnOnOff(blue_led, LED_OFF);
    358e:	83 e0       	ldi	r24, 0x03	; 3
    3590:	60 e0       	ldi	r22, 0x00	; 0
    3592:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			LED_turnOnOff(red_led, LED_OFF);
    3596:	82 e0       	ldi	r24, 0x02	; 2
    3598:	60 e0       	ldi	r22, 0x00	; 0
    359a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			/* clearing the LCD and displaying "CAR" */
			LCD_clearScreen();
    359e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("CAR");
    35a2:	80 e6       	ldi	r24, 0x60	; 96
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_displayString>
			/* blinking the yellow led */
			LED_yellowBlink(NUM_OF_SEC);
    35aa:	85 e0       	ldi	r24, 0x05	; 5
    35ac:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <LED_yellowBlink>
			/* clearing the flags */
			clear_flags();
    35b0:	0e 94 81 19 	call	0x3302	; 0x3302 <clear_flags>
    35b4:	9b c0       	rjmp	.+310    	; 0x36ec <PEDESTRAIN_mode+0x3cc>
		/* if the yellow led is on */
		} else if(STD_ON == yellow_flag){
    35b6:	80 91 83 00 	lds	r24, 0x0083
    35ba:	81 30       	cpi	r24, 0x01	; 1
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <PEDESTRAIN_mode+0x2a0>
    35be:	96 c0       	rjmp	.+300    	; 0x36ec <PEDESTRAIN_mode+0x3cc>
			/* blinking the yellow led */
			LED_yellowBlink(NUM_OF_SEC);
    35c0:	85 e0       	ldi	r24, 0x05	; 5
    35c2:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <LED_yellowBlink>
			/* turn on the blue and red leds */
			LED_turnOnOff(blue_led, LED_ON);
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			LED_turnOnOff(red_led, LED_ON);
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	61 e0       	ldi	r22, 0x01	; 1
    35d2:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			/* clearing the screen and displaying "pedestrain"*/
			LCD_clearScreen();
    35d6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("pedestrain");
    35da:	84 e6       	ldi	r24, 0x64	; 100
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_displayString>
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e4       	ldi	r25, 0x40	; 64
    35e6:	ac e9       	ldi	r26, 0x9C	; 156
    35e8:	b5 e4       	ldi	r27, 0x45	; 69
    35ea:	8b 87       	std	Y+11, r24	; 0x0b
    35ec:	9c 87       	std	Y+12, r25	; 0x0c
    35ee:	ad 87       	std	Y+13, r26	; 0x0d
    35f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	4a e7       	ldi	r20, 0x7A	; 122
    3600:	55 e4       	ldi	r21, 0x45	; 69
    3602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	8f 83       	std	Y+7, r24	; 0x07
    360c:	98 87       	std	Y+8, r25	; 0x08
    360e:	a9 87       	std	Y+9, r26	; 0x09
    3610:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3612:	6f 81       	ldd	r22, Y+7	; 0x07
    3614:	78 85       	ldd	r23, Y+8	; 0x08
    3616:	89 85       	ldd	r24, Y+9	; 0x09
    3618:	9a 85       	ldd	r25, Y+10	; 0x0a
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e8       	ldi	r20, 0x80	; 128
    3620:	5f e3       	ldi	r21, 0x3F	; 63
    3622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3626:	88 23       	and	r24, r24
    3628:	2c f4       	brge	.+10     	; 0x3634 <PEDESTRAIN_mode+0x314>
		__ticks = 1;
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	9e 83       	std	Y+6, r25	; 0x06
    3630:	8d 83       	std	Y+5, r24	; 0x05
    3632:	3f c0       	rjmp	.+126    	; 0x36b2 <PEDESTRAIN_mode+0x392>
	else if (__tmp > 65535)
    3634:	6f 81       	ldd	r22, Y+7	; 0x07
    3636:	78 85       	ldd	r23, Y+8	; 0x08
    3638:	89 85       	ldd	r24, Y+9	; 0x09
    363a:	9a 85       	ldd	r25, Y+10	; 0x0a
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	3f ef       	ldi	r19, 0xFF	; 255
    3640:	4f e7       	ldi	r20, 0x7F	; 127
    3642:	57 e4       	ldi	r21, 0x47	; 71
    3644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3648:	18 16       	cp	r1, r24
    364a:	4c f5       	brge	.+82     	; 0x369e <PEDESTRAIN_mode+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364c:	6b 85       	ldd	r22, Y+11	; 0x0b
    364e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3650:	8d 85       	ldd	r24, Y+13	; 0x0d
    3652:	9e 85       	ldd	r25, Y+14	; 0x0e
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e2       	ldi	r20, 0x20	; 32
    365a:	51 e4       	ldi	r21, 0x41	; 65
    365c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	9e 83       	std	Y+6, r25	; 0x06
    3672:	8d 83       	std	Y+5, r24	; 0x05
    3674:	0f c0       	rjmp	.+30     	; 0x3694 <PEDESTRAIN_mode+0x374>
    3676:	80 e9       	ldi	r24, 0x90	; 144
    3678:	91 e0       	ldi	r25, 0x01	; 1
    367a:	9c 83       	std	Y+4, r25	; 0x04
    367c:	8b 83       	std	Y+3, r24	; 0x03
    367e:	8b 81       	ldd	r24, Y+3	; 0x03
    3680:	9c 81       	ldd	r25, Y+4	; 0x04
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <PEDESTRAIN_mode+0x362>
    3686:	9c 83       	std	Y+4, r25	; 0x04
    3688:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368a:	8d 81       	ldd	r24, Y+5	; 0x05
    368c:	9e 81       	ldd	r25, Y+6	; 0x06
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	9e 83       	std	Y+6, r25	; 0x06
    3692:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3694:	8d 81       	ldd	r24, Y+5	; 0x05
    3696:	9e 81       	ldd	r25, Y+6	; 0x06
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	69 f7       	brne	.-38     	; 0x3676 <PEDESTRAIN_mode+0x356>
    369c:	14 c0       	rjmp	.+40     	; 0x36c6 <PEDESTRAIN_mode+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369e:	6f 81       	ldd	r22, Y+7	; 0x07
    36a0:	78 85       	ldd	r23, Y+8	; 0x08
    36a2:	89 85       	ldd	r24, Y+9	; 0x09
    36a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	9e 83       	std	Y+6, r25	; 0x06
    36b0:	8d 83       	std	Y+5, r24	; 0x05
    36b2:	8d 81       	ldd	r24, Y+5	; 0x05
    36b4:	9e 81       	ldd	r25, Y+6	; 0x06
    36b6:	9a 83       	std	Y+2, r25	; 0x02
    36b8:	89 83       	std	Y+1, r24	; 0x01
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	9a 81       	ldd	r25, Y+2	; 0x02
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <PEDESTRAIN_mode+0x39e>
    36c2:	9a 83       	std	Y+2, r25	; 0x02
    36c4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5000);
			/* turning off the blue and red leds */
			LED_turnOnOff(blue_led, LED_OFF);
    36c6:	83 e0       	ldi	r24, 0x03	; 3
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			LED_turnOnOff(red_led, LED_OFF);
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LED_turnOnOff>
			/* clearing the LCD and displaying "CAR" */
			LCD_clearScreen();
    36d6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("CAR");
    36da:	80 e6       	ldi	r24, 0x60	; 96
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_displayString>
			/* blinking the yellow led */
			LED_yellowBlink(NUM_OF_SEC);
    36e2:	85 e0       	ldi	r24, 0x05	; 5
    36e4:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <LED_yellowBlink>
			/* clear the flags */
			clear_flags();
    36e8:	0e 94 81 19 	call	0x3302	; 0x3302 <clear_flags>
		}
		/* clearing the flag which indicates that I'm exiting the *
		 * interrupt.                                             */
		g_pedestrian_f = OUTSIDE_INTERRUPT;
    36ec:	10 92 86 00 	sts	0x0086, r1
	}
}
    36f0:	aa 96       	adiw	r28, 0x2a	; 42
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <__prologue_saves__>:
    3702:	2f 92       	push	r2
    3704:	3f 92       	push	r3
    3706:	4f 92       	push	r4
    3708:	5f 92       	push	r5
    370a:	6f 92       	push	r6
    370c:	7f 92       	push	r7
    370e:	8f 92       	push	r8
    3710:	9f 92       	push	r9
    3712:	af 92       	push	r10
    3714:	bf 92       	push	r11
    3716:	cf 92       	push	r12
    3718:	df 92       	push	r13
    371a:	ef 92       	push	r14
    371c:	ff 92       	push	r15
    371e:	0f 93       	push	r16
    3720:	1f 93       	push	r17
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	ca 1b       	sub	r28, r26
    372c:	db 0b       	sbc	r29, r27
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	f8 94       	cli
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	cd bf       	out	0x3d, r28	; 61
    3738:	09 94       	ijmp

0000373a <__epilogue_restores__>:
    373a:	2a 88       	ldd	r2, Y+18	; 0x12
    373c:	39 88       	ldd	r3, Y+17	; 0x11
    373e:	48 88       	ldd	r4, Y+16	; 0x10
    3740:	5f 84       	ldd	r5, Y+15	; 0x0f
    3742:	6e 84       	ldd	r6, Y+14	; 0x0e
    3744:	7d 84       	ldd	r7, Y+13	; 0x0d
    3746:	8c 84       	ldd	r8, Y+12	; 0x0c
    3748:	9b 84       	ldd	r9, Y+11	; 0x0b
    374a:	aa 84       	ldd	r10, Y+10	; 0x0a
    374c:	b9 84       	ldd	r11, Y+9	; 0x09
    374e:	c8 84       	ldd	r12, Y+8	; 0x08
    3750:	df 80       	ldd	r13, Y+7	; 0x07
    3752:	ee 80       	ldd	r14, Y+6	; 0x06
    3754:	fd 80       	ldd	r15, Y+5	; 0x05
    3756:	0c 81       	ldd	r16, Y+4	; 0x04
    3758:	1b 81       	ldd	r17, Y+3	; 0x03
    375a:	aa 81       	ldd	r26, Y+2	; 0x02
    375c:	b9 81       	ldd	r27, Y+1	; 0x01
    375e:	ce 0f       	add	r28, r30
    3760:	d1 1d       	adc	r29, r1
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
    376c:	ed 01       	movw	r28, r26
    376e:	08 95       	ret

00003770 <_exit>:
    3770:	f8 94       	cli

00003772 <__stop_program>:
    3772:	ff cf       	rjmp	.-2      	; 0x3772 <__stop_program>
